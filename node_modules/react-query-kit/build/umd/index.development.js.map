{"version":3,"file":"index.development.js","sources":["../../src/utils.ts","../../src/createBaseQuery.ts","../../src/createQuery.ts","../../src/createSuspenseQuery.ts","../../src/createInfiniteQuery.ts","../../src/createSuspenseInfiniteQuery.ts","../../src/createMutation.ts","../../src/router.ts"],"sourcesContent":["import * as TanstackReactQuery from '@tanstack/react-query'\nimport type { Query, QueryClient, QueryKey } from '@tanstack/react-query'\n\nimport type { Middleware } from './types'\n\nexport const ReactQuery = TanstackReactQuery\n\nexport const isV5 = !!ReactQuery.useSuspenseQuery\n\nexport const suspenseOptions = {\n  enabled: true,\n  suspense: true,\n  keepPreviousData: undefined,\n  useErrorBoundary: (_error: unknown, query: Query) =>\n    query.state.data === undefined,\n}\n\nexport const withMiddleware = (\n  hook: any,\n  defaultOptions: any,\n  type: 'queries' | 'mutations'\n) => {\n  return function useMiddleware(\n    options?: { client?: QueryClient; use?: Middleware[] },\n    queryClient?: QueryClient\n  ) {\n    const [uses, opts]: [Middleware[], any] = [\n      ReactQuery.useQueryClient(\n        // @ts-ignore Compatible with ReactQuery v4\n        isV5 ? queryClient : options\n      ).getDefaultOptions()[type],\n      defaultOptions,\n      options,\n    ].reduce(\n      ([u1, o1], { use: u2 = [], ...o2 } = {}) => [\n        [...u1, ...u2],\n        { ...o1, ...o2 },\n      ],\n      [[]]\n    )\n\n    return uses.reduceRight((next, use) => use(next), hook)(opts, queryClient)\n  }\n}\n\nexport const getKey = (queryKey: QueryKey, variables?: any): QueryKey => {\n  return variables === undefined ? queryKey : [...queryKey, variables]\n}\n","import {\n  type QueryClient,\n  type QueryFunctionContext,\n  type UseBaseQueryOptions,\n  type UseInfiniteQueryOptions,\n} from '@tanstack/react-query'\n\nimport { ReactQuery, getKey as getFullKey, withMiddleware } from './utils'\n\ntype QueryBaseHookOptions = Omit<\n  UseBaseQueryOptions,\n  'queryKey' | 'queryFn'\n> & {\n  fetcher?: any\n  variables?: any\n}\n\nexport const createBaseQuery = (\n  defaultOptions: any,\n  useRQHook: (options: any, queryClient?: any) => any,\n  overrideOptions?: Partial<UseInfiniteQueryOptions>\n): any => {\n  if (process.env.NODE_ENV !== 'production') {\n    // @ts-ignore\n    if (defaultOptions.useDefaultOptions) {\n      console.error(\n        '[Bug] useDefaultOptions is not supported, please use middleware instead.'\n      )\n    }\n\n    // @ts-ignore\n    if (defaultOptions.queryFn) {\n      console.error(\n        '[Bug] queryFn is not supported, please use fetcher instead.'\n      )\n    }\n  }\n\n  const getQueryOptions = (fetcherFn: any, variables: any) => {\n    return {\n      queryFn:\n        variables && variables === ReactQuery.skipToken\n          ? ReactQuery.skipToken\n          : (context: QueryFunctionContext) => fetcherFn(variables, context),\n      queryKey: getFullKey(defaultOptions.queryKey, variables),\n    }\n  }\n\n  const getKey = (variables?: any) =>\n    getFullKey(defaultOptions.queryKey, variables)\n\n  const getOptions = (variables: any) => {\n    return {\n      ...defaultOptions,\n      ...getQueryOptions(defaultOptions.fetcher, variables),\n    }\n  }\n\n  const getFetchOptions = (variables: any) => {\n    return {\n      ...getQueryOptions(defaultOptions.fetcher, variables),\n      queryKeyHashFn: defaultOptions.queryKeyHashFn,\n      getPreviousPageParam: defaultOptions.getPreviousPageParam,\n      getNextPageParam: defaultOptions.getNextPageParam,\n      initialPageParam: defaultOptions.initialPageParam,\n    }\n  }\n\n  const useBaseHook = (\n    options: QueryBaseHookOptions,\n    queryClient?: QueryClient\n  ) => {\n    return useRQHook(\n      {\n        ...options,\n        ...getQueryOptions(options.fetcher, options.variables),\n        ...overrideOptions,\n      },\n      queryClient\n    )\n  }\n\n  return Object.assign(withMiddleware(useBaseHook, defaultOptions, 'queries'), {\n    fetcher: defaultOptions.fetcher,\n    getKey,\n    getOptions,\n    getFetchOptions,\n  })\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type { CompatibleError, CreateQueryOptions, QueryHook } from './types'\nimport { ReactQuery } from './utils'\n\nexport function createQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError\n>(\n  options: CreateQueryOptions<TFnData, TVariables, TError>\n): QueryHook<TFnData, TVariables, TError> {\n  return createBaseQuery(options, ReactQuery.useQuery)\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateSuspenseQueryOptions,\n  SuspenseQueryHook,\n} from './types'\nimport { ReactQuery, isV5, suspenseOptions } from './utils'\n\nexport function createSuspenseQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError\n>(\n  options: CreateSuspenseQueryOptions<TFnData, TVariables, TError>\n): SuspenseQueryHook<TFnData, TVariables, TError> {\n  return isV5\n    ? createBaseQuery(options, ReactQuery.useSuspenseQuery)\n    : createBaseQuery(options, ReactQuery.useQuery, suspenseOptions)\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateInfiniteQueryOptions,\n  InfiniteQueryHook,\n} from './types'\nimport { ReactQuery } from './utils'\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: CreateInfiniteQueryOptions<TFnData, TVariables, TError, TPageParam>\n): InfiniteQueryHook<TFnData, TVariables, TError, TPageParam> {\n  return createBaseQuery(options, ReactQuery.useInfiniteQuery)\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateSuspenseInfiniteQueryOptions,\n  SuspenseInfiniteQueryHook,\n} from './types'\nimport { ReactQuery, isV5, suspenseOptions } from './utils'\n\nexport function createSuspenseInfiniteQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: CreateSuspenseInfiniteQueryOptions<\n    TFnData,\n    TVariables,\n    TError,\n    TPageParam\n  >\n): SuspenseInfiniteQueryHook<TFnData, TVariables, TError, TPageParam> {\n  return isV5\n    ? createBaseQuery(options, ReactQuery.useSuspenseInfiniteQuery)\n    : createBaseQuery(options, ReactQuery.useInfiniteQuery, suspenseOptions)\n}\n","import type {\n  CompatibleError,\n  CreateMutationOptions,\n  MutationHook,\n} from './types'\nimport { ReactQuery, withMiddleware } from './utils'\n\nexport function createMutation<\n  TData = unknown,\n  TVariables = void,\n  TError = CompatibleError,\n  TContext = unknown\n>(\n  defaultOptions: CreateMutationOptions<TData, TVariables, TError, TContext>\n): MutationHook<TData, TVariables, TError, TContext> {\n  return Object.assign(\n    withMiddleware(ReactQuery.useMutation, defaultOptions, 'mutations'),\n    {\n      getKey: () => defaultOptions.mutationKey,\n      getOptions: () => defaultOptions,\n      mutationFn: defaultOptions.mutationFn,\n    }\n  ) as MutationHook<TData, TVariables, TError, TContext>\n}\n","import { QueryKey } from '@tanstack/react-query'\n\nimport { createInfiniteQuery } from './createInfiniteQuery'\nimport { createMutation } from './createMutation'\nimport { createQuery } from './createQuery'\nimport { createSuspenseInfiniteQuery } from './createSuspenseInfiniteQuery'\nimport { createSuspenseQuery } from './createSuspenseQuery'\nimport type {\n  CompatibleError,\n  CreateRouter,\n  RouterConfig,\n  RouterInfiniteQuery,\n  RouterInfiniteQueryOptions,\n  RouterMutation,\n  RouterMutationOptions,\n  RouterQuery,\n  RouterQueryOptions,\n} from './types'\n\nconst buildRouter = (keys: QueryKey, config: RouterConfig) => {\n  return Object.entries(config).reduce(\n    (acc, [key, opts]) => {\n      if (!opts._type) {\n        acc[key] = buildRouter([...keys, key], opts)\n      } else {\n        const options: any = {\n          ...opts,\n          [opts._type === `m` ? `mutationKey` : `queryKey`]: [...keys, key],\n        }\n\n        acc[key] =\n          opts._type === `m`\n            ? {\n                useMutation: createMutation(options),\n                ...createMutation(options),\n              }\n            : opts._type === `q`\n            ? {\n                useQuery: createQuery(options),\n                useSuspenseQuery: createSuspenseQuery(options),\n                ...createQuery(options),\n              }\n            : {\n                useInfiniteQuery: createInfiniteQuery(options),\n                useSuspenseInfiniteQuery: createSuspenseInfiniteQuery(options),\n                ...createInfiniteQuery(options),\n              }\n      }\n\n      return acc\n    },\n    {\n      getKey: () => keys,\n    } as any\n  )\n}\n\nexport const router = <TConfig extends RouterConfig>(\n  key: string | QueryKey,\n  config: TConfig\n): CreateRouter<TConfig> => {\n  return buildRouter(Array.isArray(key) ? key : [key], config)\n}\n\nfunction query<TFnData, TVariables = void, TError = CompatibleError>(\n  options: RouterQueryOptions<TFnData, TVariables, TError>\n) {\n  return {\n    ...options,\n    _type: 'q',\n  } as RouterQuery<TFnData, TVariables, TError>\n}\n\nfunction infiniteQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: RouterInfiniteQueryOptions<TFnData, TVariables, TError, TPageParam>\n) {\n  return { ...options, _type: 'inf' } as RouterInfiniteQuery<\n    TFnData,\n    TVariables,\n    TError,\n    TPageParam\n  >\n}\n\nfunction mutation<\n  TFnData = unknown,\n  TVariables = void,\n  TError = CompatibleError,\n  TContext = unknown\n>(options: RouterMutationOptions<TFnData, TVariables, TError, TContext>) {\n  return { ...options, _type: 'm' } as RouterMutation<\n    TFnData,\n    TVariables,\n    TError,\n    TContext\n  >\n}\n\nrouter.query = query\nrouter.infiniteQuery = infiniteQuery\nrouter.mutation = mutation\n"],"names":["ReactQuery","TanstackReactQuery","isV5","useSuspenseQuery","suspenseOptions","enabled","suspense","keepPreviousData","undefined","useErrorBoundary","_error","query","state","data","withMiddleware","hook","defaultOptions","type","useMiddleware","options","queryClient","uses","opts","useQueryClient","getDefaultOptions","reduce","u1","o1","use","u2","o2","reduceRight","next","getKey","queryKey","variables","createBaseQuery","useRQHook","overrideOptions","useDefaultOptions","console","error","queryFn","getQueryOptions","fetcherFn","skipToken","context","getFullKey","getOptions","fetcher","getFetchOptions","queryKeyHashFn","getPreviousPageParam","getNextPageParam","initialPageParam","useBaseHook","Object","assign","createQuery","useQuery","createSuspenseQuery","createInfiniteQuery","useInfiniteQuery","createSuspenseInfiniteQuery","useSuspenseInfiniteQuery","createMutation","useMutation","mutationKey","mutationFn","buildRouter","keys","config","entries","acc","key","_type","router","Array","isArray","infiniteQuery","mutation"],"mappings":"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"}