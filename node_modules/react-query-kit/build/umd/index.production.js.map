{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/createBaseQuery.ts","../../src/createQuery.ts","../../src/createSuspenseQuery.ts","../../src/createInfiniteQuery.ts","../../src/createSuspenseInfiniteQuery.ts","../../src/createMutation.ts","../../src/router.ts"],"sourcesContent":["import * as TanstackReactQuery from '@tanstack/react-query'\nimport type { Query, QueryClient, QueryKey } from '@tanstack/react-query'\n\nimport type { Middleware } from './types'\n\nexport const ReactQuery = TanstackReactQuery\n\nexport const isV5 = !!ReactQuery.useSuspenseQuery\n\nexport const suspenseOptions = {\n  enabled: true,\n  suspense: true,\n  keepPreviousData: undefined,\n  useErrorBoundary: (_error: unknown, query: Query) =>\n    query.state.data === undefined,\n}\n\nexport const withMiddleware = (\n  hook: any,\n  defaultOptions: any,\n  type: 'queries' | 'mutations'\n) => {\n  return function useMiddleware(\n    options?: { client?: QueryClient; use?: Middleware[] },\n    queryClient?: QueryClient\n  ) {\n    const [uses, opts]: [Middleware[], any] = [\n      ReactQuery.useQueryClient(\n        // @ts-ignore Compatible with ReactQuery v4\n        isV5 ? queryClient : options\n      ).getDefaultOptions()[type],\n      defaultOptions,\n      options,\n    ].reduce(\n      ([u1, o1], { use: u2 = [], ...o2 } = {}) => [\n        [...u1, ...u2],\n        { ...o1, ...o2 },\n      ],\n      [[]]\n    )\n\n    return uses.reduceRight((next, use) => use(next), hook)(opts, queryClient)\n  }\n}\n\nexport const getKey = (queryKey: QueryKey, variables?: any): QueryKey => {\n  return variables === undefined ? queryKey : [...queryKey, variables]\n}\n","import {\n  type QueryClient,\n  type QueryFunctionContext,\n  type UseBaseQueryOptions,\n  type UseInfiniteQueryOptions,\n} from '@tanstack/react-query'\n\nimport { ReactQuery, getKey as getFullKey, withMiddleware } from './utils'\n\ntype QueryBaseHookOptions = Omit<\n  UseBaseQueryOptions,\n  'queryKey' | 'queryFn'\n> & {\n  fetcher?: any\n  variables?: any\n}\n\nexport const createBaseQuery = (\n  defaultOptions: any,\n  useRQHook: (options: any, queryClient?: any) => any,\n  overrideOptions?: Partial<UseInfiniteQueryOptions>\n): any => {\n  if (process.env.NODE_ENV !== 'production') {\n    // @ts-ignore\n    if (defaultOptions.useDefaultOptions) {\n      console.error(\n        '[Bug] useDefaultOptions is not supported, please use middleware instead.'\n      )\n    }\n\n    // @ts-ignore\n    if (defaultOptions.queryFn) {\n      console.error(\n        '[Bug] queryFn is not supported, please use fetcher instead.'\n      )\n    }\n  }\n\n  const getQueryOptions = (fetcherFn: any, variables: any) => {\n    return {\n      queryFn:\n        variables && variables === ReactQuery.skipToken\n          ? ReactQuery.skipToken\n          : (context: QueryFunctionContext) => fetcherFn(variables, context),\n      queryKey: getFullKey(defaultOptions.queryKey, variables),\n    }\n  }\n\n  const getKey = (variables?: any) =>\n    getFullKey(defaultOptions.queryKey, variables)\n\n  const getOptions = (variables: any) => {\n    return {\n      ...defaultOptions,\n      ...getQueryOptions(defaultOptions.fetcher, variables),\n    }\n  }\n\n  const getFetchOptions = (variables: any) => {\n    return {\n      ...getQueryOptions(defaultOptions.fetcher, variables),\n      queryKeyHashFn: defaultOptions.queryKeyHashFn,\n      getPreviousPageParam: defaultOptions.getPreviousPageParam,\n      getNextPageParam: defaultOptions.getNextPageParam,\n      initialPageParam: defaultOptions.initialPageParam,\n    }\n  }\n\n  const useBaseHook = (\n    options: QueryBaseHookOptions,\n    queryClient?: QueryClient\n  ) => {\n    return useRQHook(\n      {\n        ...options,\n        ...getQueryOptions(options.fetcher, options.variables),\n        ...overrideOptions,\n      },\n      queryClient\n    )\n  }\n\n  return Object.assign(withMiddleware(useBaseHook, defaultOptions, 'queries'), {\n    fetcher: defaultOptions.fetcher,\n    getKey,\n    getOptions,\n    getFetchOptions,\n  })\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type { CompatibleError, CreateQueryOptions, QueryHook } from './types'\nimport { ReactQuery } from './utils'\n\nexport function createQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError\n>(\n  options: CreateQueryOptions<TFnData, TVariables, TError>\n): QueryHook<TFnData, TVariables, TError> {\n  return createBaseQuery(options, ReactQuery.useQuery)\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateSuspenseQueryOptions,\n  SuspenseQueryHook,\n} from './types'\nimport { ReactQuery, isV5, suspenseOptions } from './utils'\n\nexport function createSuspenseQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError\n>(\n  options: CreateSuspenseQueryOptions<TFnData, TVariables, TError>\n): SuspenseQueryHook<TFnData, TVariables, TError> {\n  return isV5\n    ? createBaseQuery(options, ReactQuery.useSuspenseQuery)\n    : createBaseQuery(options, ReactQuery.useQuery, suspenseOptions)\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateInfiniteQueryOptions,\n  InfiniteQueryHook,\n} from './types'\nimport { ReactQuery } from './utils'\n\nexport function createInfiniteQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: CreateInfiniteQueryOptions<TFnData, TVariables, TError, TPageParam>\n): InfiniteQueryHook<TFnData, TVariables, TError, TPageParam> {\n  return createBaseQuery(options, ReactQuery.useInfiniteQuery)\n}\n","import { createBaseQuery } from './createBaseQuery'\nimport type {\n  CompatibleError,\n  CreateSuspenseInfiniteQueryOptions,\n  SuspenseInfiniteQueryHook,\n} from './types'\nimport { ReactQuery, isV5, suspenseOptions } from './utils'\n\nexport function createSuspenseInfiniteQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: CreateSuspenseInfiniteQueryOptions<\n    TFnData,\n    TVariables,\n    TError,\n    TPageParam\n  >\n): SuspenseInfiniteQueryHook<TFnData, TVariables, TError, TPageParam> {\n  return isV5\n    ? createBaseQuery(options, ReactQuery.useSuspenseInfiniteQuery)\n    : createBaseQuery(options, ReactQuery.useInfiniteQuery, suspenseOptions)\n}\n","import type {\n  CompatibleError,\n  CreateMutationOptions,\n  MutationHook,\n} from './types'\nimport { ReactQuery, withMiddleware } from './utils'\n\nexport function createMutation<\n  TData = unknown,\n  TVariables = void,\n  TError = CompatibleError,\n  TContext = unknown\n>(\n  defaultOptions: CreateMutationOptions<TData, TVariables, TError, TContext>\n): MutationHook<TData, TVariables, TError, TContext> {\n  return Object.assign(\n    withMiddleware(ReactQuery.useMutation, defaultOptions, 'mutations'),\n    {\n      getKey: () => defaultOptions.mutationKey,\n      getOptions: () => defaultOptions,\n      mutationFn: defaultOptions.mutationFn,\n    }\n  ) as MutationHook<TData, TVariables, TError, TContext>\n}\n","import { QueryKey } from '@tanstack/react-query'\n\nimport { createInfiniteQuery } from './createInfiniteQuery'\nimport { createMutation } from './createMutation'\nimport { createQuery } from './createQuery'\nimport { createSuspenseInfiniteQuery } from './createSuspenseInfiniteQuery'\nimport { createSuspenseQuery } from './createSuspenseQuery'\nimport type {\n  CompatibleError,\n  CreateRouter,\n  RouterConfig,\n  RouterInfiniteQuery,\n  RouterInfiniteQueryOptions,\n  RouterMutation,\n  RouterMutationOptions,\n  RouterQuery,\n  RouterQueryOptions,\n} from './types'\n\nconst buildRouter = (keys: QueryKey, config: RouterConfig) => {\n  return Object.entries(config).reduce(\n    (acc, [key, opts]) => {\n      if (!opts._type) {\n        acc[key] = buildRouter([...keys, key], opts)\n      } else {\n        const options: any = {\n          ...opts,\n          [opts._type === `m` ? `mutationKey` : `queryKey`]: [...keys, key],\n        }\n\n        acc[key] =\n          opts._type === `m`\n            ? {\n                useMutation: createMutation(options),\n                ...createMutation(options),\n              }\n            : opts._type === `q`\n            ? {\n                useQuery: createQuery(options),\n                useSuspenseQuery: createSuspenseQuery(options),\n                ...createQuery(options),\n              }\n            : {\n                useInfiniteQuery: createInfiniteQuery(options),\n                useSuspenseInfiniteQuery: createSuspenseInfiniteQuery(options),\n                ...createInfiniteQuery(options),\n              }\n      }\n\n      return acc\n    },\n    {\n      getKey: () => keys,\n    } as any\n  )\n}\n\nexport const router = <TConfig extends RouterConfig>(\n  key: string | QueryKey,\n  config: TConfig\n): CreateRouter<TConfig> => {\n  return buildRouter(Array.isArray(key) ? key : [key], config)\n}\n\nfunction query<TFnData, TVariables = void, TError = CompatibleError>(\n  options: RouterQueryOptions<TFnData, TVariables, TError>\n) {\n  return {\n    ...options,\n    _type: 'q',\n  } as RouterQuery<TFnData, TVariables, TError>\n}\n\nfunction infiniteQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: RouterInfiniteQueryOptions<TFnData, TVariables, TError, TPageParam>\n) {\n  return { ...options, _type: 'inf' } as RouterInfiniteQuery<\n    TFnData,\n    TVariables,\n    TError,\n    TPageParam\n  >\n}\n\nfunction mutation<\n  TFnData = unknown,\n  TVariables = void,\n  TError = CompatibleError,\n  TContext = unknown\n>(options: RouterMutationOptions<TFnData, TVariables, TError, TContext>) {\n  return { ...options, _type: 'm' } as RouterMutation<\n    TFnData,\n    TVariables,\n    TError,\n    TContext\n  >\n}\n\nrouter.query = query\nrouter.infiniteQuery = infiniteQuery\nrouter.mutation = mutation\n"],"names":["ReactQuery","isV5","useSuspenseQuery","suspenseOptions","enabled","suspense","keepPreviousData","undefined","useErrorBoundary","_error","query","state","data","withMiddleware","hook","defaultOptions","type","options","queryClient","uses","opts","useQueryClient","getDefaultOptions","reduce","u1","o1","use","u2","o2","reduceRight","next","getKey","queryKey","variables","createBaseQuery","useRQHook","overrideOptions","getQueryOptions","fetcherFn","queryFn","skipToken","context","getFullKey","Object","assign","fetcher","getOptions","getFetchOptions","queryKeyHashFn","getPreviousPageParam","getNextPageParam","initialPageParam","createQuery","useQuery","createSuspenseQuery","createInfiniteQuery","useInfiniteQuery","createSuspenseInfiniteQuery","useSuspenseInfiniteQuery","createMutation","useMutation","mutationKey","mutationFn","buildRouter","keys","config","entries","acc","key","_type","router","Array","isArray","infiniteQuery","mutation"],"mappings":"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"}