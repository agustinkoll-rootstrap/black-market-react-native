import { createInfiniteQuery } from './createInfiniteQuery.esm.js';
import { createMutation } from './createMutation.esm.js';
import { createQuery } from './createQuery.esm.js';
import { createSuspenseInfiniteQuery } from './createSuspenseInfiniteQuery.esm.js';
import { createSuspenseQuery } from './createSuspenseQuery.esm.js';

const buildRouter = (keys, config) => {
  return Object.entries(config).reduce((acc, [key, opts]) => {
    if (!opts._type) {
      acc[key] = buildRouter([...keys, key], opts);
    } else {
      const options = { ...opts,
        [opts._type === "m" ? "mutationKey" : "queryKey"]: [...keys, key]
      };
      acc[key] = opts._type === "m" ? {
        useMutation: createMutation(options),
        ...createMutation(options)
      } : opts._type === "q" ? {
        useQuery: createQuery(options),
        useSuspenseQuery: createSuspenseQuery(options),
        ...createQuery(options)
      } : {
        useInfiniteQuery: createInfiniteQuery(options),
        useSuspenseInfiniteQuery: createSuspenseInfiniteQuery(options),
        ...createInfiniteQuery(options)
      };
    }

    return acc;
  }, {
    getKey: () => keys
  });
};

const router = (key, config) => {
  return buildRouter(Array.isArray(key) ? key : [key], config);
};

function query(options) {
  return { ...options,
    _type: 'q'
  };
}

function infiniteQuery(options) {
  return { ...options,
    _type: 'inf'
  };
}

function mutation(options) {
  return { ...options,
    _type: 'm'
  };
}

router.query = query;
router.infiniteQuery = infiniteQuery;
router.mutation = mutation;

export { router };
//# sourceMappingURL=router.esm.js.map
