{"version":3,"file":"router.mjs","sources":["../../src/router.ts"],"sourcesContent":["import { QueryKey } from '@tanstack/react-query'\n\nimport { createInfiniteQuery } from './createInfiniteQuery'\nimport { createMutation } from './createMutation'\nimport { createQuery } from './createQuery'\nimport { createSuspenseInfiniteQuery } from './createSuspenseInfiniteQuery'\nimport { createSuspenseQuery } from './createSuspenseQuery'\nimport type {\n  CompatibleError,\n  CreateRouter,\n  RouterConfig,\n  RouterInfiniteQuery,\n  RouterInfiniteQueryOptions,\n  RouterMutation,\n  RouterMutationOptions,\n  RouterQuery,\n  RouterQueryOptions,\n} from './types'\n\nconst buildRouter = (keys: QueryKey, config: RouterConfig) => {\n  return Object.entries(config).reduce(\n    (acc, [key, opts]) => {\n      if (!opts._type) {\n        acc[key] = buildRouter([...keys, key], opts)\n      } else {\n        const options: any = {\n          ...opts,\n          [opts._type === `m` ? `mutationKey` : `queryKey`]: [...keys, key],\n        }\n\n        acc[key] =\n          opts._type === `m`\n            ? {\n                useMutation: createMutation(options),\n                ...createMutation(options),\n              }\n            : opts._type === `q`\n            ? {\n                useQuery: createQuery(options),\n                useSuspenseQuery: createSuspenseQuery(options),\n                ...createQuery(options),\n              }\n            : {\n                useInfiniteQuery: createInfiniteQuery(options),\n                useSuspenseInfiniteQuery: createSuspenseInfiniteQuery(options),\n                ...createInfiniteQuery(options),\n              }\n      }\n\n      return acc\n    },\n    {\n      getKey: () => keys,\n    } as any\n  )\n}\n\nexport const router = <TConfig extends RouterConfig>(\n  key: string | QueryKey,\n  config: TConfig\n): CreateRouter<TConfig> => {\n  return buildRouter(Array.isArray(key) ? key : [key], config)\n}\n\nfunction query<TFnData, TVariables = void, TError = CompatibleError>(\n  options: RouterQueryOptions<TFnData, TVariables, TError>\n) {\n  return {\n    ...options,\n    _type: 'q',\n  } as RouterQuery<TFnData, TVariables, TError>\n}\n\nfunction infiniteQuery<\n  TFnData,\n  TVariables = void,\n  TError = CompatibleError,\n  TPageParam = number\n>(\n  options: RouterInfiniteQueryOptions<TFnData, TVariables, TError, TPageParam>\n) {\n  return { ...options, _type: 'inf' } as RouterInfiniteQuery<\n    TFnData,\n    TVariables,\n    TError,\n    TPageParam\n  >\n}\n\nfunction mutation<\n  TFnData = unknown,\n  TVariables = void,\n  TError = CompatibleError,\n  TContext = unknown\n>(options: RouterMutationOptions<TFnData, TVariables, TError, TContext>) {\n  return { ...options, _type: 'm' } as RouterMutation<\n    TFnData,\n    TVariables,\n    TError,\n    TContext\n  >\n}\n\nrouter.query = query\nrouter.infiniteQuery = infiniteQuery\nrouter.mutation = mutation\n"],"names":["buildRouter","keys","config","Object","entries","reduce","acc","key","opts","_type","options","useMutation","createMutation","useQuery","createQuery","useSuspenseQuery","createSuspenseQuery","useInfiniteQuery","createInfiniteQuery","useSuspenseInfiniteQuery","createSuspenseInfiniteQuery","getKey","router","Array","isArray","query","infiniteQuery","mutation"],"mappings":";;;;;;AAmBA,MAAMA,WAAW,GAAG,CAACC,IAAD,EAAiBC,MAAjB,KAA0C;AAC5D,EAAA,OAAOC,MAAM,CAACC,OAAP,CAAeF,MAAf,EAAuBG,MAAvB,CACL,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMC,IAAN,CAAN,KAAsB;AACpB,IAAA,IAAI,CAACA,IAAI,CAACC,KAAV,EAAiB;AACfH,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAWP,WAAW,CAAC,CAAC,GAAGC,IAAJ,EAAUM,GAAV,CAAD,EAAiBC,IAAjB,CAAtB,CAAA;AACD,KAFD,MAEO;AACL,MAAA,MAAME,OAAY,GAAG,EACnB,GAAGF,IADgB;QAEnB,CAACA,IAAI,CAACC,KAAL,KAAA,GAAA,GAAA,aAAA,GAAA,UAAD,GAAmD,CAAC,GAAGR,IAAJ,EAAUM,GAAV,CAAA;OAFrD,CAAA;AAKAD,MAAAA,GAAG,CAACC,GAAD,CAAH,GACEC,IAAI,CAACC,KAAL,KACI,GAAA,GAAA;AACEE,QAAAA,WAAW,EAAEC,cAAc,CAACF,OAAD,CAD7B;QAEE,GAAGE,cAAc,CAACF,OAAD,CAAA;AAFnB,OADJ,GAKIF,IAAI,CAACC,KAAL,KACA,GAAA,GAAA;AACEI,QAAAA,QAAQ,EAAEC,WAAW,CAACJ,OAAD,CADvB;AAEEK,QAAAA,gBAAgB,EAAEC,mBAAmB,CAACN,OAAD,CAFvC;QAGE,GAAGI,WAAW,CAACJ,OAAD,CAAA;AAHhB,OADA,GAMA;AACEO,QAAAA,gBAAgB,EAAEC,mBAAmB,CAACR,OAAD,CADvC;AAEES,QAAAA,wBAAwB,EAAEC,2BAA2B,CAACV,OAAD,CAFvD;QAGE,GAAGQ,mBAAmB,CAACR,OAAD,CAAA;OAf9B,CAAA;AAiBD,KAAA;;AAED,IAAA,OAAOJ,GAAP,CAAA;AACD,GA9BI,EA+BL;AACEe,IAAAA,MAAM,EAAE,MAAMpB,IAAAA;AADhB,GA/BK,CAAP,CAAA;AAmCD,CApCD,CAAA;;MAsCaqB,MAAM,GAAG,CACpBf,GADoB,EAEpBL,MAFoB,KAGM;AAC1B,EAAA,OAAOF,WAAW,CAACuB,KAAK,CAACC,OAAN,CAAcjB,GAAd,CAAqBA,GAAAA,GAArB,GAA2B,CAACA,GAAD,CAA5B,EAAmCL,MAAnC,CAAlB,CAAA;AACD,EALM;;AAOP,SAASuB,KAAT,CACEf,OADF,EAEE;EACA,OAAO,EACL,GAAGA,OADE;AAELD,IAAAA,KAAK,EAAE,GAAA;GAFT,CAAA;AAID,CAAA;;AAED,SAASiB,aAAT,CAMEhB,OANF,EAOE;EACA,OAAO,EAAE,GAAGA,OAAL;AAAcD,IAAAA,KAAK,EAAE,KAAA;GAA5B,CAAA;AAMD,CAAA;;AAED,SAASkB,QAAT,CAKEjB,OALF,EAKyE;EACvE,OAAO,EAAE,GAAGA,OAAL;AAAcD,IAAAA,KAAK,EAAE,GAAA;GAA5B,CAAA;AAMD,CAAA;;AAEDa,MAAM,CAACG,KAAP,GAAeA,KAAf,CAAA;AACAH,MAAM,CAACI,aAAP,GAAuBA,aAAvB,CAAA;AACAJ,MAAM,CAACK,QAAP,GAAkBA,QAAlB;;;;"}