package expo.modules.updates.procedures;

/**
 * Base class for all procedures that transition or reset state on the UpdatesStateMachine.
 * State machine state may only be mutated in subclasses of this class to ensure serial
 * (well-defined) ordering of state transitions.
 */
@kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\"\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\b&\u0018\u00002\u00020\u0001:\u0002\u000b\fB\u0005\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u0007\u001a\u00020\b2\u0006\u0010\t\u001a\u00020\nH&R\u0012\u0010\u0003\u001a\u00020\u0004X\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0005\u0010\u0006\u00a8\u0006\r"}, d2 = {"Lexpo/modules/updates/procedures/StateMachineProcedure;", "", "()V", "loggerTimerLabel", "", "getLoggerTimerLabel", "()Ljava/lang/String;", "run", "", "procedureContext", "Lexpo/modules/updates/procedures/StateMachineProcedure$ProcedureContext;", "ProcedureContext", "StateMachineProcedureContext", "expo-updates_debug"})
public abstract class StateMachineProcedure {
    
    public StateMachineProcedure() {
        super();
    }
    
    public abstract void run(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.procedures.StateMachineProcedure.ProcedureContext procedureContext);
    
    @org.jetbrains.annotations.NotNull()
    public abstract java.lang.String getLoggerTimerLabel();
    
    @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u0010\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\bf\u0018\u00002\u00020\u0001J\b\u0010\u0002\u001a\u00020\u0003H&\u00a8\u0006\u0004"}, d2 = {"Lexpo/modules/updates/procedures/StateMachineProcedure$ProcedureContext;", "Lexpo/modules/updates/procedures/StateMachineProcedure$StateMachineProcedureContext;", "onComplete", "", "expo-updates_debug"})
    public static abstract interface ProcedureContext extends expo.modules.updates.procedures.StateMachineProcedure.StateMachineProcedureContext {
        
        /**
         * Must be called when the StateMachineProcedure is done updating the state machine. Usually
         * at the end of work in the run method.
         */
        public abstract void onComplete();
    }
    
    @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u001e\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u00002\u00020\u0001J\b\u0010\u0002\u001a\u00020\u0003H\'J\u0010\u0010\u0004\u001a\u00020\u00052\u0006\u0010\u0006\u001a\u00020\u0007H&J\b\u0010\b\u001a\u00020\u0005H&\u00a8\u0006\t"}, d2 = {"Lexpo/modules/updates/procedures/StateMachineProcedure$StateMachineProcedureContext;", "", "getCurrentState", "Lexpo/modules/updates/statemachine/UpdatesStateValue;", "processStateEvent", "", "event", "Lexpo/modules/updates/statemachine/UpdatesStateEvent;", "resetState", "expo-updates_debug"})
    public static abstract interface StateMachineProcedureContext {
        
        /**
         * Transition the state machine forward to a new state.
         */
        public abstract void processStateEvent(@org.jetbrains.annotations.NotNull()
        expo.modules.updates.statemachine.UpdatesStateEvent event);
        
        /**
         * Get the current state.
         */
        @org.jetbrains.annotations.NotNull()
        @java.lang.Deprecated()
        public abstract expo.modules.updates.statemachine.UpdatesStateValue getCurrentState();
        
        /**
         * Reset the machine to its starting state. Should only be called after the app restarts (reloadAsync()).
         */
        public abstract void resetState();
    }
}