package expo.modules.updates;

/**
 * Main entry point to expo-updates. Singleton that keeps track of updates state, holds references
 * to instances of other updates classes, and is the central hub for all updates-related tasks.
 *
 * The `start` method in the singleton instance of [IUpdatesController] should be invoked early in
 * the application lifecycle, via [UpdatesPackage]. It delegates to an instance of [LoaderTask] to
 * start the process of loading and launching an update, then responds appropriately depending on
 * the callbacks that are invoked.
 */
@kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0003\u0018\u0000 \u00032\u00020\u0001:\u0001\u0003B\u0005\u00a2\u0006\u0002\u0010\u0002\u00a8\u0006\u0004"}, d2 = {"Lexpo/modules/updates/UpdatesController;", "", "()V", "Companion", "expo-updates_debug"})
public final class UpdatesController {
    @org.jetbrains.annotations.Nullable()
    private static expo.modules.updates.IUpdatesController singletonInstance;
    @org.jetbrains.annotations.Nullable()
    private static expo.modules.updates.UpdatesConfiguration overrideConfiguration;
    @org.jetbrains.annotations.NotNull()
    public static final expo.modules.updates.UpdatesController.Companion Companion = null;
    
    public UpdatesController() {
        super();
    }
    
    @org.jetbrains.annotations.NotNull()
    public static final expo.modules.updates.IUpdatesController getInstance() {
        return null;
    }
    
    @kotlin.jvm.JvmStatic()
    public static final void initialize(@org.jetbrains.annotations.NotNull()
    android.content.Context context) {
    }
    
    @kotlin.jvm.JvmStatic()
    public static final void initializeWithoutStarting(@org.jetbrains.annotations.NotNull()
    android.content.Context context) {
    }
    
    @kotlin.jvm.JvmStatic()
    public static final void overrideConfiguration(@org.jetbrains.annotations.NotNull()
    android.content.Context context, @org.jetbrains.annotations.NotNull()
    java.util.Map<java.lang.String, ? extends java.lang.Object> configuration) {
    }
    
    @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000R\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0007\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0000\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J%\u0010\u0012\u001a\u00020\u00132\f\u0010\u0014\u001a\b\u0012\u0004\u0012\u00020\u00160\u00152\b\u0010\u0017\u001a\u0004\u0018\u00010\u0018H\u0000\u00a2\u0006\u0002\b\u0019J\u0010\u0010\u001a\u001a\u00020\u00132\u0006\u0010\u001b\u001a\u00020\u001cH\u0007J\u0010\u0010\u001d\u001a\u00020\u001e2\u0006\u0010\u001b\u001a\u00020\u001cH\u0002J\u0010\u0010\u001f\u001a\u00020\u00132\u0006\u0010\u001b\u001a\u00020\u001cH\u0007J$\u0010\b\u001a\u00020\u00132\u0006\u0010\u001b\u001a\u00020\u001c2\u0012\u0010 \u001a\u000e\u0012\u0004\u0012\u00020\"\u0012\u0004\u0012\u00020\u00010!H\u0007R\u001a\u0010\u0003\u001a\u00020\u00048FX\u0087\u0004\u00a2\u0006\f\u0012\u0004\b\u0005\u0010\u0002\u001a\u0004\b\u0006\u0010\u0007R\u0010\u0010\b\u001a\u0004\u0018\u00010\tX\u0082\u000e\u00a2\u0006\u0002\n\u0000R$\u0010\f\u001a\u00020\u000b2\u0006\u0010\n\u001a\u00020\u000b8@@@X\u0080\u000e\u00a2\u0006\f\u001a\u0004\b\r\u0010\u000e\"\u0004\b\u000f\u0010\u0010R\u0010\u0010\u0011\u001a\u0004\u0018\u00010\u0004X\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u0006#"}, d2 = {"Lexpo/modules/updates/UpdatesController$Companion;", "", "()V", "instance", "Lexpo/modules/updates/IUpdatesController;", "getInstance$annotations", "getInstance", "()Lexpo/modules/updates/IUpdatesController;", "overrideConfiguration", "Lexpo/modules/updates/UpdatesConfiguration;", "value", "", "shouldEmitJsEvents", "getShouldEmitJsEvents$expo_updates_debug", "()Z", "setShouldEmitJsEvents$expo_updates_debug", "(Z)V", "singletonInstance", "bindAppContext", "", "appContext", "Ljava/lang/ref/WeakReference;", "Lexpo/modules/kotlin/AppContext;", "eventEmitter", "Lexpo/modules/kotlin/events/EventEmitter;", "bindAppContext$expo_updates_debug", "initialize", "context", "Landroid/content/Context;", "initializeAsDevLauncherWithoutStarting", "Lexpo/modules/updates/UpdatesDevLauncherController;", "initializeWithoutStarting", "configuration", "", "", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
        
        @kotlin.jvm.JvmStatic()
        @java.lang.Deprecated()
        public static void getInstance$annotations() {
        }
        
        @org.jetbrains.annotations.NotNull()
        public final expo.modules.updates.IUpdatesController getInstance() {
            return null;
        }
        
        @kotlin.jvm.JvmStatic()
        public final void initializeWithoutStarting(@org.jetbrains.annotations.NotNull()
        android.content.Context context) {
        }
        
        private final expo.modules.updates.UpdatesDevLauncherController initializeAsDevLauncherWithoutStarting(android.content.Context context) {
            return null;
        }
        
        /**
         * Initializes the UpdatesController singleton. This should be called as early as possible in the
         * application's lifecycle. Can pass additional configuration to this method to set or override
         * configuration values at runtime rather than just AndroidManifest.xml.
         * @param context the base context of the application, ideally a [ReactApplication]
         */
        @kotlin.jvm.JvmStatic()
        public final void initialize(@org.jetbrains.annotations.NotNull()
        android.content.Context context) {
        }
        
        /**
         * Overrides the [UpdatesConfiguration] that will be used inside [UpdatesController]
         * This should be called as early as possible in the application's lifecycle.
         * Can pass additional configuration to this method to set or override
         * configuration values at runtime rather than just AndroidManifest.xml.
         *
         * @param context the base context of the application, ideally a [ReactApplication]
         * @param configuration map of configuration pairs to override those from AndroidManifest.xml
         */
        @kotlin.jvm.JvmStatic()
        public final void overrideConfiguration(@org.jetbrains.annotations.NotNull()
        android.content.Context context, @org.jetbrains.annotations.NotNull()
        java.util.Map<java.lang.String, ? extends java.lang.Object> configuration) {
        }
        
        public final boolean getShouldEmitJsEvents$expo_updates_debug() {
            return false;
        }
        
        public final void setShouldEmitJsEvents$expo_updates_debug(boolean value) {
        }
        
        /**
         * Binds the [AppContext] and [EventEmitter] instance from [UpdatesModule].
         */
        public final void bindAppContext$expo_updates_debug(@org.jetbrains.annotations.NotNull()
        java.lang.ref.WeakReference<expo.modules.kotlin.AppContext> appContext, @org.jetbrains.annotations.Nullable()
        expo.modules.kotlin.events.EventEmitter eventEmitter) {
        }
    }
}