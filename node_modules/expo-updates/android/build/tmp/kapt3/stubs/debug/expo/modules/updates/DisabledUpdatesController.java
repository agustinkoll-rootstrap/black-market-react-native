package expo.modules.updates;

/**
 * Updates controller for applications that either disable updates explicitly or have an error
 * during initialization. Errors that may occur include but are not limited to:
 * - Disk access errors
 * - Internal database initialization errors
 * - Configuration errors (missing required configuration)
 */
@kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u00ae\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\u0018\u0000 U2\u00020\u00012\u00020\u0002:\u0002UVB\u001d\u0012\u0006\u0010\u0003\u001a\u00020\u0004\u0012\u000e\u0010\u0005\u001a\n\u0018\u00010\u0006j\u0004\u0018\u0001`\u0007\u00a2\u0006\u0002\u0010\bJ\u0016\u00104\u001a\u0002052\f\u00106\u001a\b\u0012\u0004\u0012\u00020807H\u0016J\u0016\u00109\u001a\u0002052\f\u00106\u001a\b\u0012\u0004\u0012\u00020:07H\u0016J\b\u0010;\u001a\u00020<H\u0016J\u0016\u0010=\u001a\u0002052\f\u00106\u001a\b\u0012\u0004\u0012\u00020>07H\u0016J\u0016\u0010?\u001a\u0002052\f\u00106\u001a\b\u0012\u0004\u0012\u00020@07H\u0016J\b\u0010A\u001a\u000205H\u0002J\u0010\u0010B\u001a\u0002052\u0006\u0010C\u001a\u00020DH\u0016J\u0010\u0010E\u001a\u0002052\u0006\u0010F\u001a\u00020GH\u0016J\u0010\u0010H\u001a\u0002052\u0006\u0010I\u001a\u00020\u0006H\u0016J\u0016\u0010J\u001a\u0002052\f\u00106\u001a\b\u0012\u0004\u0012\u00020507H\u0016J\"\u0010K\u001a\u0002052\u0006\u0010L\u001a\u00020\u00112\u0006\u0010M\u001a\u00020\u00112\b\u0010N\u001a\u0004\u0018\u00010OH\u0002J\u0018\u0010P\u001a\u0002052\u0006\u0010M\u001a\u00020Q2\u0006\u0010\u0003\u001a\u00020@H\u0016J(\u0010R\u001a\u0002052\u0006\u0010S\u001a\u00020\u00112\b\u0010%\u001a\u0004\u0018\u00010\u00112\f\u00106\u001a\b\u0012\u0004\u0012\u00020507H\u0016J\b\u0010T\u001a\u000205H\u0016R\"\u0010\t\u001a\n\u0012\u0004\u0012\u00020\u000b\u0018\u00010\nX\u0096\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\f\u0010\r\"\u0004\b\u000e\u0010\u000fR\u0016\u0010\u0010\u001a\u0004\u0018\u00010\u00118VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0012\u0010\u0013R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u001c\u0010\u0014\u001a\u0004\u0018\u00010\u0015X\u0096\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0016\u0010\u0017\"\u0004\b\u0018\u0010\u0019R\u0016\u0010\u0005\u001a\n\u0018\u00010\u0006j\u0004\u0018\u0001`\u0007X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0014\u0010\u001a\u001a\u00020\u001bX\u0096D\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001a\u0010\u001cR\u000e\u0010\u001d\u001a\u00020\u001bX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u001e\u001a\u00020\u001bX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0016\u0010\u001f\u001a\u0004\u0018\u00010\u00118VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b \u0010\u0013R\u0010\u0010!\u001a\u0004\u0018\u00010\"X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010#\u001a\u00020$X\u0082\u0004\u00a2\u0006\u0002\n\u0000R$\u0010&\u001a\u00020\u001b2\u0006\u0010%\u001a\u00020\u001b@VX\u0096\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\'\u0010\u001c\"\u0004\b(\u0010)R\u000e\u0010*\u001a\u00020+X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u001c\u0010,\u001a\u0004\u0018\u00010-X\u0096\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b.\u0010/\"\u0004\b0\u00101R\u0016\u00102\u001a\n\u0012\u0004\u0012\u000203\u0018\u00010\nX\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u0006W"}, d2 = {"Lexpo/modules/updates/DisabledUpdatesController;", "Lexpo/modules/updates/IUpdatesController;", "Lexpo/modules/updates/statemachine/UpdatesStateChangeEventSender;", "context", "Landroid/content/Context;", "fatalException", "Ljava/lang/Exception;", "Lkotlin/Exception;", "(Landroid/content/Context;Ljava/lang/Exception;)V", "appContext", "Ljava/lang/ref/WeakReference;", "Lexpo/modules/kotlin/AppContext;", "getAppContext", "()Ljava/lang/ref/WeakReference;", "setAppContext", "(Ljava/lang/ref/WeakReference;)V", "bundleAssetName", "", "getBundleAssetName", "()Ljava/lang/String;", "eventEmitter", "Lexpo/modules/kotlin/events/EventEmitter;", "getEventEmitter", "()Lexpo/modules/kotlin/events/EventEmitter;", "setEventEmitter", "(Lexpo/modules/kotlin/events/EventEmitter;)V", "isActiveController", "", "()Z", "isLoaderTaskFinished", "isStarted", "launchAssetFile", "getLaunchAssetFile", "launcher", "Lexpo/modules/updates/launcher/Launcher;", "logger", "Lexpo/modules/updates/logging/UpdatesLogger;", "value", "shouldEmitJsEvents", "getShouldEmitJsEvents", "setShouldEmitJsEvents", "(Z)V", "stateMachine", "Lexpo/modules/updates/statemachine/UpdatesStateMachine;", "updatesDirectory", "Ljava/io/File;", "getUpdatesDirectory", "()Ljava/io/File;", "setUpdatesDirectory", "(Ljava/io/File;)V", "weakActivity", "Landroid/app/Activity;", "checkForUpdate", "", "callback", "Lexpo/modules/updates/IUpdatesController$ModuleCallback;", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult;", "fetchUpdate", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult;", "getConstantsForModule", "Lexpo/modules/updates/IUpdatesController$UpdatesModuleConstants;", "getExtraParams", "Landroid/os/Bundle;", "getNativeStateMachineContext", "Lexpo/modules/updates/statemachine/UpdatesStateContext;", "notifyController", "onDidCreateDevSupportManager", "devSupportManager", "Lcom/facebook/react/devsupport/interfaces/DevSupportManager;", "onDidCreateReactInstance", "reactContext", "Lcom/facebook/react/bridge/ReactContext;", "onReactInstanceException", "exception", "relaunchReactApplicationForModule", "sendEventToJS", "eventName", "eventType", "params", "Lcom/facebook/react/bridge/WritableMap;", "sendUpdateStateChangeEventToAppContext", "Lexpo/modules/updates/statemachine/UpdatesStateEventType;", "setExtraParam", "key", "start", "Companion", "UpdatesDisabledException", "expo-updates_debug"})
public final class DisabledUpdatesController implements expo.modules.updates.IUpdatesController, expo.modules.updates.statemachine.UpdatesStateChangeEventSender {
    @org.jetbrains.annotations.NotNull()
    private final android.content.Context context = null;
    @org.jetbrains.annotations.Nullable()
    private final java.lang.Exception fatalException = null;
    @org.jetbrains.annotations.Nullable()
    private java.lang.ref.WeakReference<expo.modules.kotlin.AppContext> appContext;
    @org.jetbrains.annotations.Nullable()
    private expo.modules.kotlin.events.EventEmitter eventEmitter;
    
    /**
     * Keep the activity for [RecreateReactContextProcedure] to relaunch the app.
     */
    @org.jetbrains.annotations.Nullable()
    private java.lang.ref.WeakReference<android.app.Activity> weakActivity;
    private boolean shouldEmitJsEvents = false;
    @org.jetbrains.annotations.NotNull()
    private final expo.modules.updates.logging.UpdatesLogger logger = null;
    @org.jetbrains.annotations.NotNull()
    private final expo.modules.updates.statemachine.UpdatesStateMachine stateMachine = null;
    private boolean isStarted = false;
    @org.jetbrains.annotations.Nullable()
    private expo.modules.updates.launcher.Launcher launcher;
    private boolean isLoaderTaskFinished = false;
    @org.jetbrains.annotations.Nullable()
    private java.io.File updatesDirectory;
    private final boolean isActiveController = false;
    private static final java.lang.String TAG = null;
    @org.jetbrains.annotations.NotNull()
    public static final expo.modules.updates.DisabledUpdatesController.Companion Companion = null;
    
    public DisabledUpdatesController(@org.jetbrains.annotations.NotNull()
    android.content.Context context, @org.jetbrains.annotations.Nullable()
    java.lang.Exception fatalException) {
        super();
    }
    
    @java.lang.Override()
    @org.jetbrains.annotations.Nullable()
    public java.lang.ref.WeakReference<expo.modules.kotlin.AppContext> getAppContext() {
        return null;
    }
    
    @java.lang.Override()
    public void setAppContext(@org.jetbrains.annotations.Nullable()
    java.lang.ref.WeakReference<expo.modules.kotlin.AppContext> p0) {
    }
    
    @java.lang.Override()
    @org.jetbrains.annotations.Nullable()
    public expo.modules.kotlin.events.EventEmitter getEventEmitter() {
        return null;
    }
    
    @java.lang.Override()
    public void setEventEmitter(@org.jetbrains.annotations.Nullable()
    expo.modules.kotlin.events.EventEmitter p0) {
    }
    
    @java.lang.Override()
    public boolean getShouldEmitJsEvents() {
        return false;
    }
    
    @java.lang.Override()
    public void setShouldEmitJsEvents(boolean value) {
    }
    
    @java.lang.Override()
    @org.jetbrains.annotations.Nullable()
    public java.io.File getUpdatesDirectory() {
        return null;
    }
    
    public void setUpdatesDirectory(@org.jetbrains.annotations.Nullable()
    java.io.File p0) {
    }
    
    @java.lang.Override()
    @kotlin.jvm.Synchronized()
    @org.jetbrains.annotations.Nullable()
    public synchronized java.lang.String getLaunchAssetFile() {
        return null;
    }
    
    @java.lang.Override()
    @org.jetbrains.annotations.Nullable()
    public java.lang.String getBundleAssetName() {
        return null;
    }
    
    @java.lang.Override()
    public void onDidCreateDevSupportManager(@org.jetbrains.annotations.NotNull()
    com.facebook.react.devsupport.interfaces.DevSupportManager devSupportManager) {
    }
    
    @java.lang.Override()
    public void onDidCreateReactInstance(@org.jetbrains.annotations.NotNull()
    com.facebook.react.bridge.ReactContext reactContext) {
    }
    
    @java.lang.Override()
    public void onReactInstanceException(@org.jetbrains.annotations.NotNull()
    java.lang.Exception exception) {
    }
    
    @java.lang.Override()
    public boolean isActiveController() {
        return false;
    }
    
    @java.lang.Override()
    @kotlin.jvm.Synchronized()
    public synchronized void start() {
    }
    
    @java.lang.Override()
    @org.jetbrains.annotations.NotNull()
    public expo.modules.updates.IUpdatesController.UpdatesModuleConstants getConstantsForModule() {
        return null;
    }
    
    @java.lang.Override()
    public void relaunchReactApplicationForModule(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<kotlin.Unit> callback) {
    }
    
    @java.lang.Override()
    public void getNativeStateMachineContext(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<expo.modules.updates.statemachine.UpdatesStateContext> callback) {
    }
    
    @java.lang.Override()
    public void checkForUpdate(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<expo.modules.updates.IUpdatesController.CheckForUpdateResult> callback) {
    }
    
    @java.lang.Override()
    public void fetchUpdate(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<expo.modules.updates.IUpdatesController.FetchUpdateResult> callback) {
    }
    
    @java.lang.Override()
    public void getExtraParams(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<android.os.Bundle> callback) {
    }
    
    @java.lang.Override()
    public void setExtraParam(@org.jetbrains.annotations.NotNull()
    java.lang.String key, @org.jetbrains.annotations.Nullable()
    java.lang.String value, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<kotlin.Unit> callback) {
    }
    
    @kotlin.jvm.Synchronized()
    private final synchronized void notifyController() {
    }
    
    @java.lang.Override()
    public void sendUpdateStateChangeEventToAppContext(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.statemachine.UpdatesStateEventType eventType, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.statemachine.UpdatesStateContext context) {
    }
    
    private final void sendEventToJS(java.lang.String eventName, java.lang.String eventType, com.facebook.react.bridge.WritableMap params) {
    }
    
    @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/DisabledUpdatesController$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "expo-updates_debug"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
    }
    
    @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004\u00a8\u0006\u0005"}, d2 = {"Lexpo/modules/updates/DisabledUpdatesController$UpdatesDisabledException;", "Lexpo/modules/kotlin/exception/CodedException;", "message", "", "(Ljava/lang/String;)V", "expo-updates_debug"})
    public static final class UpdatesDisabledException extends expo.modules.kotlin.exception.CodedException {
        
        public UpdatesDisabledException(@org.jetbrains.annotations.NotNull()
        java.lang.String message) {
            super(null, null, null);
        }
    }
}