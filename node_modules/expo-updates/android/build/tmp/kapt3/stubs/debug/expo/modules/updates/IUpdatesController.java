package expo.modules.updates;

@kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000x\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\n\bf\u0018\u00002\u00020\u0001:\u0004;<=>J\u0016\u0010 \u001a\u00020!2\f\u0010\"\u001a\b\u0012\u0004\u0012\u00020$0#H&J\u0016\u0010%\u001a\u00020!2\f\u0010\"\u001a\b\u0012\u0004\u0012\u00020&0#H&J\b\u0010\'\u001a\u00020(H&J\u0016\u0010)\u001a\u00020!2\f\u0010\"\u001a\b\u0012\u0004\u0012\u00020*0#H&J\u0016\u0010+\u001a\u00020!2\f\u0010\"\u001a\b\u0012\u0004\u0012\u00020,0#H&J\u0010\u0010-\u001a\u00020!2\u0006\u0010.\u001a\u00020/H&J\u0010\u00100\u001a\u00020!2\u0006\u00101\u001a\u000202H&J\u0010\u00103\u001a\u00020!2\u0006\u00104\u001a\u000205H&J\u0016\u00106\u001a\u00020!2\f\u0010\"\u001a\b\u0012\u0004\u0012\u00020!0#H&J(\u00107\u001a\u00020!2\u0006\u00108\u001a\u00020\n2\b\u00109\u001a\u0004\u0018\u00010\n2\f\u0010\"\u001a\b\u0012\u0004\u0012\u00020!0#H&J\b\u0010:\u001a\u00020!H&R \u0010\u0002\u001a\n\u0012\u0004\u0012\u00020\u0004\u0018\u00010\u0003X\u00a6\u000e\u00a2\u0006\f\u001a\u0004\b\u0005\u0010\u0006\"\u0004\b\u0007\u0010\bR\u0014\u0010\t\u001a\u0004\u0018\u00010\nX\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\u000b\u0010\fR\u001a\u0010\r\u001a\u0004\u0018\u00010\u000eX\u00a6\u000e\u00a2\u0006\f\u001a\u0004\b\u000f\u0010\u0010\"\u0004\b\u0011\u0010\u0012R\u0012\u0010\u0013\u001a\u00020\u0014X\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0013\u0010\u0015R\u0014\u0010\u0016\u001a\u0004\u0018\u00010\nX\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0017\u0010\fR\u0018\u0010\u0018\u001a\u00020\u0014X\u00a6\u000e\u00a2\u0006\f\u001a\u0004\b\u0019\u0010\u0015\"\u0004\b\u001a\u0010\u001bR\u0014\u0010\u001c\u001a\u0004\u0018\u00010\u001dX\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\u001e\u0010\u001f\u00a8\u0006?"}, d2 = {"Lexpo/modules/updates/IUpdatesController;", "", "appContext", "Ljava/lang/ref/WeakReference;", "Lexpo/modules/kotlin/AppContext;", "getAppContext", "()Ljava/lang/ref/WeakReference;", "setAppContext", "(Ljava/lang/ref/WeakReference;)V", "bundleAssetName", "", "getBundleAssetName", "()Ljava/lang/String;", "eventEmitter", "Lexpo/modules/kotlin/events/EventEmitter;", "getEventEmitter", "()Lexpo/modules/kotlin/events/EventEmitter;", "setEventEmitter", "(Lexpo/modules/kotlin/events/EventEmitter;)V", "isActiveController", "", "()Z", "launchAssetFile", "getLaunchAssetFile", "shouldEmitJsEvents", "getShouldEmitJsEvents", "setShouldEmitJsEvents", "(Z)V", "updatesDirectory", "Ljava/io/File;", "getUpdatesDirectory", "()Ljava/io/File;", "checkForUpdate", "", "callback", "Lexpo/modules/updates/IUpdatesController$ModuleCallback;", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult;", "fetchUpdate", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult;", "getConstantsForModule", "Lexpo/modules/updates/IUpdatesController$UpdatesModuleConstants;", "getExtraParams", "Landroid/os/Bundle;", "getNativeStateMachineContext", "Lexpo/modules/updates/statemachine/UpdatesStateContext;", "onDidCreateDevSupportManager", "devSupportManager", "Lcom/facebook/react/devsupport/interfaces/DevSupportManager;", "onDidCreateReactInstance", "reactContext", "Lcom/facebook/react/bridge/ReactContext;", "onReactInstanceException", "exception", "Ljava/lang/Exception;", "relaunchReactApplicationForModule", "setExtraParam", "key", "value", "start", "CheckForUpdateResult", "FetchUpdateResult", "ModuleCallback", "UpdatesModuleConstants", "expo-updates_debug"})
public abstract interface IUpdatesController {
    
    /**
     * The path on disk to the launch asset (JS bundle) file for the React Native host to use.
     * Blocks until the configured timeout runs out, or a new update has been downloaded and is ready
     * to use (whichever comes sooner). ReactNativeHost.getJSBundleFile() should call into this.
     *
     * If this returns null, something has gone wrong and expo-updates has not been able to launch or
     * find an update to use. In (and only in) this case, `getBundleAssetName()` will return a nonnull
     * fallback value to use.
     */
    @org.jetbrains.annotations.Nullable()
    public abstract java.lang.String getLaunchAssetFile();
    
    /**
     * Returns the filename of the launch asset (JS bundle) file embedded in the APK bundle, which can
     * be read using `context.getAssets()`. This is only nonnull if `getLaunchAssetFile` is null and
     * should only be used in such a situation. ReactNativeHost.getBundleAssetName() should call into
     * this.
     */
    @org.jetbrains.annotations.Nullable()
    public abstract java.lang.String getBundleAssetName();
    
    /**
     * Public for E2E tests.
     */
    @org.jetbrains.annotations.Nullable()
    public abstract java.io.File getUpdatesDirectory();
    
    /**
     * The [AppContext] assigned from [UpdatesModule]
     */
    @org.jetbrains.annotations.Nullable()
    public abstract java.lang.ref.WeakReference<expo.modules.kotlin.AppContext> getAppContext();
    
    /**
     * The [AppContext] assigned from [UpdatesModule]
     */
    public abstract void setAppContext(@org.jetbrains.annotations.Nullable()
    java.lang.ref.WeakReference<expo.modules.kotlin.AppContext> p0);
    
    /**
     * The [EventEmitter] assigned from [UpdatesModule]
     */
    @org.jetbrains.annotations.Nullable()
    public abstract expo.modules.kotlin.events.EventEmitter getEventEmitter();
    
    /**
     * The [EventEmitter] assigned from [UpdatesModule]
     */
    public abstract void setEventEmitter(@org.jetbrains.annotations.Nullable()
    expo.modules.kotlin.events.EventEmitter p0);
    
    public abstract void onDidCreateDevSupportManager(@org.jetbrains.annotations.NotNull()
    com.facebook.react.devsupport.interfaces.DevSupportManager devSupportManager);
    
    public abstract void onDidCreateReactInstance(@org.jetbrains.annotations.NotNull()
    com.facebook.react.bridge.ReactContext reactContext);
    
    public abstract void onReactInstanceException(@org.jetbrains.annotations.NotNull()
    java.lang.Exception exception);
    
    /**
     * Indicates that the controller is in active state.
     * Currently it's only active for [EnabledUpdatesController].
     */
    public abstract boolean isActiveController();
    
    /**
     * Starts the update process to launch a previously-loaded update and (if configured to do so)
     * check for a new update from the server. This method should be called as early as possible in
     * the application's lifecycle.
     * @param context the base context of the application, ideally a [ReactApplication]
     */
    public abstract void start();
    
    public abstract boolean getShouldEmitJsEvents();
    
    public abstract void setShouldEmitJsEvents(boolean p0);
    
    @org.jetbrains.annotations.NotNull()
    public abstract expo.modules.updates.IUpdatesController.UpdatesModuleConstants getConstantsForModule();
    
    public abstract void relaunchReactApplicationForModule(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<kotlin.Unit> callback);
    
    public abstract void getNativeStateMachineContext(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<expo.modules.updates.statemachine.UpdatesStateContext> callback);
    
    public abstract void checkForUpdate(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<expo.modules.updates.IUpdatesController.CheckForUpdateResult> callback);
    
    public abstract void fetchUpdate(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<expo.modules.updates.IUpdatesController.FetchUpdateResult> callback);
    
    public abstract void getExtraParams(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<android.os.Bundle> callback);
    
    public abstract void setExtraParam(@org.jetbrains.annotations.NotNull()
    java.lang.String key, @org.jetbrains.annotations.Nullable()
    java.lang.String value, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.IUpdatesController.ModuleCallback<kotlin.Unit> callback);
    
    @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000$\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0005\u0005\u0006\u0007\b\tB\u000f\b\u0004\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u0082\u0001\u0004\n\u000b\f\r\u00a8\u0006\u000e"}, d2 = {"Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult;", "", "status", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$Status;", "(Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$Status;)V", "ErrorResult", "NoUpdateAvailable", "RollBackToEmbedded", "Status", "UpdateAvailable", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$ErrorResult;", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$NoUpdateAvailable;", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$RollBackToEmbedded;", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$UpdateAvailable;", "expo-updates_debug"})
    public static abstract class CheckForUpdateResult {
        @org.jetbrains.annotations.NotNull()
        private final expo.modules.updates.IUpdatesController.CheckForUpdateResult.Status status = null;
        
        private CheckForUpdateResult(expo.modules.updates.IUpdatesController.CheckForUpdateResult.Status status) {
            super();
        }
        
        @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0006\u0018\u00002\u00020\u0001B\u0019\u0012\n\u0010\u0002\u001a\u00060\u0003j\u0002`\u0004\u0012\u0006\u0010\u0005\u001a\u00020\u0006\u00a2\u0006\u0002\u0010\u0007R\u0015\u0010\u0002\u001a\u00060\u0003j\u0002`\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\tR\u0011\u0010\u0005\u001a\u00020\u0006\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000b\u00a8\u0006\f"}, d2 = {"Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$ErrorResult;", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult;", "error", "Ljava/lang/Exception;", "Lkotlin/Exception;", "message", "", "(Ljava/lang/Exception;Ljava/lang/String;)V", "getError", "()Ljava/lang/Exception;", "getMessage", "()Ljava/lang/String;", "expo-updates_debug"})
        public static final class ErrorResult extends expo.modules.updates.IUpdatesController.CheckForUpdateResult {
            @org.jetbrains.annotations.NotNull()
            private final java.lang.Exception error = null;
            @org.jetbrains.annotations.NotNull()
            private final java.lang.String message = null;
            
            public ErrorResult(@org.jetbrains.annotations.NotNull()
            java.lang.Exception error, @org.jetbrains.annotations.NotNull()
            java.lang.String message) {
            }
            
            @org.jetbrains.annotations.NotNull()
            public final java.lang.Exception getError() {
                return null;
            }
            
            @org.jetbrains.annotations.NotNull()
            public final java.lang.String getMessage() {
                return null;
            }
        }
        
        @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006\u00a8\u0006\u0007"}, d2 = {"Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$NoUpdateAvailable;", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult;", "reason", "Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResultNotAvailableReason;", "(Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResultNotAvailableReason;)V", "getReason", "()Lexpo/modules/updates/loader/LoaderTask$RemoteCheckResultNotAvailableReason;", "expo-updates_debug"})
        public static final class NoUpdateAvailable extends expo.modules.updates.IUpdatesController.CheckForUpdateResult {
            @org.jetbrains.annotations.NotNull()
            private final expo.modules.updates.loader.LoaderTask.RemoteCheckResultNotAvailableReason reason = null;
            
            public NoUpdateAvailable(@org.jetbrains.annotations.NotNull()
            expo.modules.updates.loader.LoaderTask.RemoteCheckResultNotAvailableReason reason) {
            }
            
            @org.jetbrains.annotations.NotNull()
            public final expo.modules.updates.loader.LoaderTask.RemoteCheckResultNotAvailableReason getReason() {
                return null;
            }
        }
        
        @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006\u00a8\u0006\u0007"}, d2 = {"Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$RollBackToEmbedded;", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult;", "commitTime", "Ljava/util/Date;", "(Ljava/util/Date;)V", "getCommitTime", "()Ljava/util/Date;", "expo-updates_debug"})
        public static final class RollBackToEmbedded extends expo.modules.updates.IUpdatesController.CheckForUpdateResult {
            @org.jetbrains.annotations.NotNull()
            private final java.util.Date commitTime = null;
            
            public RollBackToEmbedded(@org.jetbrains.annotations.NotNull()
            java.util.Date commitTime) {
            }
            
            @org.jetbrains.annotations.NotNull()
            public final java.util.Date getCommitTime() {
                return null;
            }
        }
        
        @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\u0006\b\u0082\u0081\u0002\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006\u00a8\u0006\u0007"}, d2 = {"Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$Status;", "", "(Ljava/lang/String;I)V", "NO_UPDATE_AVAILABLE", "UPDATE_AVAILABLE", "ROLL_BACK_TO_EMBEDDED", "ERROR", "expo-updates_debug"})
        static enum Status {
            /*public static final*/ NO_UPDATE_AVAILABLE /* = new NO_UPDATE_AVAILABLE() */,
            /*public static final*/ UPDATE_AVAILABLE /* = new UPDATE_AVAILABLE() */,
            /*public static final*/ ROLL_BACK_TO_EMBEDDED /* = new ROLL_BACK_TO_EMBEDDED() */,
            /*public static final*/ ERROR /* = new ERROR() */;
            
            Status() {
            }
            
            @org.jetbrains.annotations.NotNull()
            public static kotlin.enums.EnumEntries<expo.modules.updates.IUpdatesController.CheckForUpdateResult.Status> getEntries() {
                return null;
            }
        }
        
        @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006\u00a8\u0006\u0007"}, d2 = {"Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult$UpdateAvailable;", "Lexpo/modules/updates/IUpdatesController$CheckForUpdateResult;", "update", "Lexpo/modules/updates/manifest/Update;", "(Lexpo/modules/updates/manifest/Update;)V", "getUpdate", "()Lexpo/modules/updates/manifest/Update;", "expo-updates_debug"})
        public static final class UpdateAvailable extends expo.modules.updates.IUpdatesController.CheckForUpdateResult {
            @org.jetbrains.annotations.NotNull()
            private final expo.modules.updates.manifest.Update update = null;
            
            public UpdateAvailable(@org.jetbrains.annotations.NotNull()
            expo.modules.updates.manifest.Update update) {
            }
            
            @org.jetbrains.annotations.NotNull()
            public final expo.modules.updates.manifest.Update getUpdate() {
                return null;
            }
        }
    }
    
    @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000$\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0005\u0005\u0006\u0007\b\tB\u000f\b\u0004\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u0082\u0001\u0004\n\u000b\f\r\u00a8\u0006\u000e"}, d2 = {"Lexpo/modules/updates/IUpdatesController$FetchUpdateResult;", "", "status", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$Status;", "(Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$Status;)V", "ErrorResult", "Failure", "RollBackToEmbedded", "Status", "Success", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$ErrorResult;", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$Failure;", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$RollBackToEmbedded;", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$Success;", "expo-updates_debug"})
    public static abstract class FetchUpdateResult {
        @org.jetbrains.annotations.NotNull()
        private final expo.modules.updates.IUpdatesController.FetchUpdateResult.Status status = null;
        
        private FetchUpdateResult(expo.modules.updates.IUpdatesController.FetchUpdateResult.Status status) {
            super();
        }
        
        @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u0016\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u0011\u0012\n\u0010\u0002\u001a\u00060\u0003j\u0002`\u0004\u00a2\u0006\u0002\u0010\u0005R\u0015\u0010\u0002\u001a\u00060\u0003j\u0002`\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0006\u0010\u0007\u00a8\u0006\b"}, d2 = {"Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$ErrorResult;", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult;", "error", "Ljava/lang/Exception;", "Lkotlin/Exception;", "(Ljava/lang/Exception;)V", "getError", "()Ljava/lang/Exception;", "expo-updates_debug"})
        public static final class ErrorResult extends expo.modules.updates.IUpdatesController.FetchUpdateResult {
            @org.jetbrains.annotations.NotNull()
            private final java.lang.Exception error = null;
            
            public ErrorResult(@org.jetbrains.annotations.NotNull()
            java.lang.Exception error) {
            }
            
            @org.jetbrains.annotations.NotNull()
            public final java.lang.Exception getError() {
                return null;
            }
        }
        
        @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002\u00a8\u0006\u0003"}, d2 = {"Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$Failure;", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult;", "()V", "expo-updates_debug"})
        public static final class Failure extends expo.modules.updates.IUpdatesController.FetchUpdateResult {
            
            public Failure() {
            }
        }
        
        @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002\u00a8\u0006\u0003"}, d2 = {"Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$RollBackToEmbedded;", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult;", "()V", "expo-updates_debug"})
        public static final class RollBackToEmbedded extends expo.modules.updates.IUpdatesController.FetchUpdateResult {
            
            public RollBackToEmbedded() {
            }
        }
        
        @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\u0006\b\u0082\u0081\u0002\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006\u00a8\u0006\u0007"}, d2 = {"Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$Status;", "", "(Ljava/lang/String;I)V", "SUCCESS", "FAILURE", "ROLL_BACK_TO_EMBEDDED", "ERROR", "expo-updates_debug"})
        static enum Status {
            /*public static final*/ SUCCESS /* = new SUCCESS() */,
            /*public static final*/ FAILURE /* = new FAILURE() */,
            /*public static final*/ ROLL_BACK_TO_EMBEDDED /* = new ROLL_BACK_TO_EMBEDDED() */,
            /*public static final*/ ERROR /* = new ERROR() */;
            
            Status() {
            }
            
            @org.jetbrains.annotations.NotNull()
            public static kotlin.enums.EnumEntries<expo.modules.updates.IUpdatesController.FetchUpdateResult.Status> getEntries() {
                return null;
            }
        }
        
        @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006\u00a8\u0006\u0007"}, d2 = {"Lexpo/modules/updates/IUpdatesController$FetchUpdateResult$Success;", "Lexpo/modules/updates/IUpdatesController$FetchUpdateResult;", "update", "Lexpo/modules/updates/db/entity/UpdateEntity;", "(Lexpo/modules/updates/db/entity/UpdateEntity;)V", "getUpdate", "()Lexpo/modules/updates/db/entity/UpdateEntity;", "expo-updates_debug"})
        public static final class Success extends expo.modules.updates.IUpdatesController.FetchUpdateResult {
            @org.jetbrains.annotations.NotNull()
            private final expo.modules.updates.db.entity.UpdateEntity update = null;
            
            public Success(@org.jetbrains.annotations.NotNull()
            expo.modules.updates.db.entity.UpdateEntity update) {
            }
            
            @org.jetbrains.annotations.NotNull()
            public final expo.modules.updates.db.entity.UpdateEntity getUpdate() {
                return null;
            }
        }
    }
    
    @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u001a\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006H&J\u0015\u0010\u0007\u001a\u00020\u00042\u0006\u0010\b\u001a\u00028\u0000H&\u00a2\u0006\u0002\u0010\t\u00a8\u0006\n"}, d2 = {"Lexpo/modules/updates/IUpdatesController$ModuleCallback;", "T", "", "onFailure", "", "exception", "Lexpo/modules/kotlin/exception/CodedException;", "onSuccess", "result", "(Ljava/lang/Object;)V", "expo-updates_debug"})
    public static abstract interface ModuleCallback<T extends java.lang.Object> {
        
        public abstract void onSuccess(T result);
        
        public abstract void onFailure(@org.jetbrains.annotations.NotNull()
        expo.modules.kotlin.exception.CodedException exception);
    }
    
    @kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000F\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u001e\n\u0002\u0010\b\n\u0002\b\u0002\b\u0086\b\u0018\u00002\u00020\u0001B}\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0003\u0012\u000e\u0010\u0005\u001a\n\u0018\u00010\u0006j\u0004\u0018\u0001`\u0007\u0012\u0006\u0010\b\u001a\u00020\t\u0012\u0006\u0010\n\u001a\u00020\t\u0012\b\u0010\u000b\u001a\u0004\u0018\u00010\f\u0012\u0006\u0010\r\u001a\u00020\u000e\u0012\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\f\u0012\u0004\u0012\u00020\f0\u0010\u0012\u0014\u0010\u0011\u001a\u0010\u0012\u0004\u0012\u00020\u0012\u0012\u0004\u0012\u00020\f\u0018\u00010\u0010\u0012\u0006\u0010\u0013\u001a\u00020\t\u00a2\u0006\u0002\u0010\u0014J\u000b\u0010#\u001a\u0004\u0018\u00010\u0003H\u00c6\u0003J\t\u0010$\u001a\u00020\tH\u00c6\u0003J\u000b\u0010%\u001a\u0004\u0018\u00010\u0003H\u00c6\u0003J\u0011\u0010&\u001a\n\u0018\u00010\u0006j\u0004\u0018\u0001`\u0007H\u00c6\u0003J\t\u0010\'\u001a\u00020\tH\u00c6\u0003J\t\u0010(\u001a\u00020\tH\u00c6\u0003J\u000b\u0010)\u001a\u0004\u0018\u00010\fH\u00c6\u0003J\t\u0010*\u001a\u00020\u000eH\u00c6\u0003J\u0015\u0010+\u001a\u000e\u0012\u0004\u0012\u00020\f\u0012\u0004\u0012\u00020\f0\u0010H\u00c6\u0003J\u0017\u0010,\u001a\u0010\u0012\u0004\u0012\u00020\u0012\u0012\u0004\u0012\u00020\f\u0018\u00010\u0010H\u00c6\u0003J\u0095\u0001\u0010-\u001a\u00020\u00002\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00032\u0010\b\u0002\u0010\u0005\u001a\n\u0018\u00010\u0006j\u0004\u0018\u0001`\u00072\b\b\u0002\u0010\b\u001a\u00020\t2\b\b\u0002\u0010\n\u001a\u00020\t2\n\b\u0002\u0010\u000b\u001a\u0004\u0018\u00010\f2\b\b\u0002\u0010\r\u001a\u00020\u000e2\u0014\b\u0002\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\f\u0012\u0004\u0012\u00020\f0\u00102\u0016\b\u0002\u0010\u0011\u001a\u0010\u0012\u0004\u0012\u00020\u0012\u0012\u0004\u0012\u00020\f\u0018\u00010\u00102\b\b\u0002\u0010\u0013\u001a\u00020\tH\u00c6\u0001J\u0013\u0010.\u001a\u00020\t2\b\u0010/\u001a\u0004\u0018\u00010\u0001H\u00d6\u0003J\t\u00100\u001a\u000201H\u00d6\u0001J\t\u00102\u001a\u00020\fH\u00d6\u0001R\u0011\u0010\r\u001a\u00020\u000e\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\u0016R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0017\u0010\u0018R\u0019\u0010\u0005\u001a\n\u0018\u00010\u0006j\u0004\u0018\u0001`\u0007\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0019\u0010\u001aR\u0011\u0010\b\u001a\u00020\t\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\u001bR\u0011\u0010\n\u001a\u00020\t\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u001bR\u0013\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001c\u0010\u0018R\u001f\u0010\u0011\u001a\u0010\u0012\u0004\u0012\u00020\u0012\u0012\u0004\u0012\u00020\f\u0018\u00010\u0010\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001d\u0010\u001eR\u001d\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\f\u0012\u0004\u0012\u00020\f0\u0010\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001f\u0010\u001eR\u0013\u0010\u000b\u001a\u0004\u0018\u00010\f\u00a2\u0006\b\n\u0000\u001a\u0004\b \u0010!R\u0011\u0010\u0013\u001a\u00020\t\u00a2\u0006\b\n\u0000\u001a\u0004\b\"\u0010\u001b\u00a8\u00063"}, d2 = {"Lexpo/modules/updates/IUpdatesController$UpdatesModuleConstants;", "", "launchedUpdate", "Lexpo/modules/updates/db/entity/UpdateEntity;", "embeddedUpdate", "emergencyLaunchException", "Ljava/lang/Exception;", "Lkotlin/Exception;", "isEnabled", "", "isUsingEmbeddedAssets", "runtimeVersion", "", "checkOnLaunch", "Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;", "requestHeaders", "", "localAssetFiles", "Lexpo/modules/updates/db/entity/AssetEntity;", "shouldDeferToNativeForAPIMethodAvailabilityInDevelopment", "(Lexpo/modules/updates/db/entity/UpdateEntity;Lexpo/modules/updates/db/entity/UpdateEntity;Ljava/lang/Exception;ZZLjava/lang/String;Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;Ljava/util/Map;Ljava/util/Map;Z)V", "getCheckOnLaunch", "()Lexpo/modules/updates/UpdatesConfiguration$CheckAutomaticallyConfiguration;", "getEmbeddedUpdate", "()Lexpo/modules/updates/db/entity/UpdateEntity;", "getEmergencyLaunchException", "()Ljava/lang/Exception;", "()Z", "getLaunchedUpdate", "getLocalAssetFiles", "()Ljava/util/Map;", "getRequestHeaders", "getRuntimeVersion", "()Ljava/lang/String;", "getShouldDeferToNativeForAPIMethodAvailabilityInDevelopment", "component1", "component10", "component2", "component3", "component4", "component5", "component6", "component7", "component8", "component9", "copy", "equals", "other", "hashCode", "", "toString", "expo-updates_debug"})
    public static final class UpdatesModuleConstants {
        @org.jetbrains.annotations.Nullable()
        private final expo.modules.updates.db.entity.UpdateEntity launchedUpdate = null;
        @org.jetbrains.annotations.Nullable()
        private final expo.modules.updates.db.entity.UpdateEntity embeddedUpdate = null;
        @org.jetbrains.annotations.Nullable()
        private final java.lang.Exception emergencyLaunchException = null;
        private final boolean isEnabled = false;
        private final boolean isUsingEmbeddedAssets = false;
        @org.jetbrains.annotations.Nullable()
        private final java.lang.String runtimeVersion = null;
        @org.jetbrains.annotations.NotNull()
        private final expo.modules.updates.UpdatesConfiguration.CheckAutomaticallyConfiguration checkOnLaunch = null;
        @org.jetbrains.annotations.NotNull()
        private final java.util.Map<java.lang.String, java.lang.String> requestHeaders = null;
        
        /**
         * Returns a map of the locally downloaded assets for the current update. Keys are the remote URLs
         * of the assets and values are local paths. This should be exported by the Updates JS module and
         * can be used by `expo-asset` or a similar module to override React Native's asset resolution and
         * use the locally downloaded assets.
         */
        @org.jetbrains.annotations.Nullable()
        private final java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> localAssetFiles = null;
        
        /**
         * Whether the JS API methods should allow calling the native module methods and thus the methods
         * on the controller in development. For non-expo development we want to throw
         * at the JS layer since there isn't a controller set up. But for development within Expo Go
         * or a Dev Client, which have their own controller/JS API implementations, we want the JS API
         * calls to go through.
         */
        private final boolean shouldDeferToNativeForAPIMethodAvailabilityInDevelopment = false;
        
        public UpdatesModuleConstants(@org.jetbrains.annotations.Nullable()
        expo.modules.updates.db.entity.UpdateEntity launchedUpdate, @org.jetbrains.annotations.Nullable()
        expo.modules.updates.db.entity.UpdateEntity embeddedUpdate, @org.jetbrains.annotations.Nullable()
        java.lang.Exception emergencyLaunchException, boolean isEnabled, boolean isUsingEmbeddedAssets, @org.jetbrains.annotations.Nullable()
        java.lang.String runtimeVersion, @org.jetbrains.annotations.NotNull()
        expo.modules.updates.UpdatesConfiguration.CheckAutomaticallyConfiguration checkOnLaunch, @org.jetbrains.annotations.NotNull()
        java.util.Map<java.lang.String, java.lang.String> requestHeaders, @org.jetbrains.annotations.Nullable()
        java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> localAssetFiles, boolean shouldDeferToNativeForAPIMethodAvailabilityInDevelopment) {
            super();
        }
        
        @org.jetbrains.annotations.Nullable()
        public final expo.modules.updates.db.entity.UpdateEntity getLaunchedUpdate() {
            return null;
        }
        
        @org.jetbrains.annotations.Nullable()
        public final expo.modules.updates.db.entity.UpdateEntity getEmbeddedUpdate() {
            return null;
        }
        
        @org.jetbrains.annotations.Nullable()
        public final java.lang.Exception getEmergencyLaunchException() {
            return null;
        }
        
        public final boolean isEnabled() {
            return false;
        }
        
        public final boolean isUsingEmbeddedAssets() {
            return false;
        }
        
        @org.jetbrains.annotations.Nullable()
        public final java.lang.String getRuntimeVersion() {
            return null;
        }
        
        @org.jetbrains.annotations.NotNull()
        public final expo.modules.updates.UpdatesConfiguration.CheckAutomaticallyConfiguration getCheckOnLaunch() {
            return null;
        }
        
        @org.jetbrains.annotations.NotNull()
        public final java.util.Map<java.lang.String, java.lang.String> getRequestHeaders() {
            return null;
        }
        
        /**
         * Returns a map of the locally downloaded assets for the current update. Keys are the remote URLs
         * of the assets and values are local paths. This should be exported by the Updates JS module and
         * can be used by `expo-asset` or a similar module to override React Native's asset resolution and
         * use the locally downloaded assets.
         */
        @org.jetbrains.annotations.Nullable()
        public final java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> getLocalAssetFiles() {
            return null;
        }
        
        /**
         * Whether the JS API methods should allow calling the native module methods and thus the methods
         * on the controller in development. For non-expo development we want to throw
         * at the JS layer since there isn't a controller set up. But for development within Expo Go
         * or a Dev Client, which have their own controller/JS API implementations, we want the JS API
         * calls to go through.
         */
        public final boolean getShouldDeferToNativeForAPIMethodAvailabilityInDevelopment() {
            return false;
        }
        
        @org.jetbrains.annotations.Nullable()
        public final expo.modules.updates.db.entity.UpdateEntity component1() {
            return null;
        }
        
        public final boolean component10() {
            return false;
        }
        
        @org.jetbrains.annotations.Nullable()
        public final expo.modules.updates.db.entity.UpdateEntity component2() {
            return null;
        }
        
        @org.jetbrains.annotations.Nullable()
        public final java.lang.Exception component3() {
            return null;
        }
        
        public final boolean component4() {
            return false;
        }
        
        public final boolean component5() {
            return false;
        }
        
        @org.jetbrains.annotations.Nullable()
        public final java.lang.String component6() {
            return null;
        }
        
        @org.jetbrains.annotations.NotNull()
        public final expo.modules.updates.UpdatesConfiguration.CheckAutomaticallyConfiguration component7() {
            return null;
        }
        
        @org.jetbrains.annotations.NotNull()
        public final java.util.Map<java.lang.String, java.lang.String> component8() {
            return null;
        }
        
        @org.jetbrains.annotations.Nullable()
        public final java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> component9() {
            return null;
        }
        
        @org.jetbrains.annotations.NotNull()
        public final expo.modules.updates.IUpdatesController.UpdatesModuleConstants copy(@org.jetbrains.annotations.Nullable()
        expo.modules.updates.db.entity.UpdateEntity launchedUpdate, @org.jetbrains.annotations.Nullable()
        expo.modules.updates.db.entity.UpdateEntity embeddedUpdate, @org.jetbrains.annotations.Nullable()
        java.lang.Exception emergencyLaunchException, boolean isEnabled, boolean isUsingEmbeddedAssets, @org.jetbrains.annotations.Nullable()
        java.lang.String runtimeVersion, @org.jetbrains.annotations.NotNull()
        expo.modules.updates.UpdatesConfiguration.CheckAutomaticallyConfiguration checkOnLaunch, @org.jetbrains.annotations.NotNull()
        java.util.Map<java.lang.String, java.lang.String> requestHeaders, @org.jetbrains.annotations.Nullable()
        java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> localAssetFiles, boolean shouldDeferToNativeForAPIMethodAvailabilityInDevelopment) {
            return null;
        }
        
        @java.lang.Override()
        public boolean equals(@org.jetbrains.annotations.Nullable()
        java.lang.Object other) {
            return false;
        }
        
        @java.lang.Override()
        public int hashCode() {
            return 0;
        }
        
        @java.lang.Override()
        @org.jetbrains.annotations.NotNull()
        public java.lang.String toString() {
            return null;
        }
    }
}