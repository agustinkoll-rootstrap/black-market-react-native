package expo.modules.updates.db.dao;

/**
 * Utility class for accessing and modifying data in SQLite relating to updates.
 */
@kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000R\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\t\n\u0002\b\u0014\n\u0002\u0010\u000b\n\u0002\b\u0005\b\'\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006H\'J\u0010\u0010\u0007\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006H\'J\u0010\u0010\b\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006H\'J\u0012\u0010\t\u001a\u0004\u0018\u00010\n2\u0006\u0010\u000b\u001a\u00020\u0006H\'J$\u0010\f\u001a\b\u0012\u0004\u0012\u00020\u000e0\r2\u0006\u0010\u000f\u001a\u00020\u00102\f\u0010\u0011\u001a\b\u0012\u0004\u0012\u00020\u00120\rH\'J\u0016\u0010\u0013\u001a\b\u0012\u0004\u0012\u00020\u000e0\r2\u0006\u0010\u0005\u001a\u00020\u0006H\'J\u0018\u0010\u0014\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0015\u001a\u00020\u0016H\'J\u0018\u0010\u0017\u001a\u00020\u00042\u0006\u0010\u0018\u001a\u00020\u00122\u0006\u0010\u0005\u001a\u00020\u0006H\'J\u001e\u0010\u0019\u001a\u00020\u00042\f\u0010\u001a\u001a\b\u0012\u0004\u0012\u00020\u001b0\r2\u0006\u0010\u0018\u001a\u00020\u0012H\'J\u0018\u0010\u001c\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0016H\'J\u0018\u0010\u001e\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u001f\u001a\u00020\u0010H\'J\u0016\u0010 \u001a\u00020\u00042\f\u0010!\u001a\b\u0012\u0004\u0012\u00020\u000e0\rH\'J\u000e\u0010\"\u001a\u00020\u00042\u0006\u0010#\u001a\u00020\u000eJ\u000e\u0010$\u001a\u00020\u00042\u0006\u0010#\u001a\u00020\u000eJ\u0010\u0010%\u001a\u00020\u00042\u0006\u0010#\u001a\u00020\u000eH\'J\u0016\u0010&\u001a\b\u0012\u0004\u0012\u00020\u00060\r2\u0006\u0010\u0018\u001a\u00020\u0012H\'J\u000e\u0010\'\u001a\b\u0012\u0004\u0012\u00020\u000e0\rH\'J\u0016\u0010(\u001a\b\u0012\u0004\u0012\u00020\u000e0\r2\u0006\u0010\u0018\u001a\u00020\u0012H\'J\u0010\u0010)\u001a\u0004\u0018\u00010\n2\u0006\u0010\u000b\u001a\u00020\u0006J\u0014\u0010*\u001a\b\u0012\u0004\u0012\u00020\u000e0\r2\u0006\u0010\u000f\u001a\u00020\u0010J\u000e\u0010+\u001a\b\u0012\u0004\u0012\u00020\u00060\rH\'J\u0010\u0010,\u001a\u0004\u0018\u00010\u000e2\u0006\u0010\u0005\u001a\u00020\u0006J\u000e\u0010-\u001a\u00020\u00042\u0006\u0010#\u001a\u00020\u000eJ\u000e\u0010.\u001a\u00020\u00042\u0006\u0010#\u001a\u00020\u000eJ\u0018\u0010.\u001a\u00020\u00042\u0006\u0010#\u001a\u00020\u000e2\u0006\u0010/\u001a\u000200H\u0017J\u0014\u00101\u001a\u00020\u00042\f\u00102\u001a\b\u0012\u0004\u0012\u00020\n0\rJ\u0016\u00103\u001a\u00020\u00042\u0006\u0010#\u001a\u00020\u000e2\u0006\u0010\u001d\u001a\u00020\u0016J\u0016\u00104\u001a\u00020\u00042\u0006\u0010#\u001a\u00020\u000e2\u0006\u0010\u001f\u001a\u00020\u0010\u00a8\u00065"}, d2 = {"Lexpo/modules/updates/db/dao/UpdateDao;", "", "()V", "_incrementFailedLaunchCount", "", "id", "Ljava/util/UUID;", "_incrementSuccessfulLaunchCount", "_keepUpdate", "_loadLaunchAssetForUpdate", "Lexpo/modules/updates/db/entity/AssetEntity;", "updateId", "_loadLaunchableUpdatesForProjectWithStatuses", "", "Lexpo/modules/updates/db/entity/UpdateEntity;", "scopeKey", "", "statuses", "Lexpo/modules/updates/db/enums/UpdateStatus;", "_loadUpdatesWithId", "_markUpdateAccessed", "lastAccessed", "Ljava/util/Date;", "_markUpdateWithStatus", "status", "_markUpdatesWithMissingAssets", "missingAssetIds", "", "_setUpdateCommitTime", "commitTime", "_setUpdateScopeKeyInternal", "newScopeKey", "deleteUpdates", "updates", "incrementFailedLaunchCount", "update", "incrementSuccessfulLaunchCount", "insertUpdate", "loadAllUpdateIdsWithStatus", "loadAllUpdates", "loadAllUpdatesWithStatus", "loadLaunchAssetForUpdate", "loadLaunchableUpdatesForScope", "loadRecentUpdateIdsWithFailedLaunch", "loadUpdateWithId", "markUpdateAccessed", "markUpdateFinished", "hasSkippedEmbeddedAssets", "", "markUpdatesWithMissingAssets", "missingAssets", "setUpdateCommitTime", "setUpdateScopeKey", "expo-updates_debug"})
@androidx.room.Dao()
public abstract class UpdateDao {
    
    public UpdateDao() {
        super();
    }
    
    /**
     * for private use only
     * must be marked public for Room
     * so we use the underscore to discourage use
     */
    @androidx.room.Query(value = "SELECT * FROM updates WHERE scope_key = :scopeKey AND (successful_launch_count > 0 OR failed_launch_count < 1) AND status IN (:statuses);")
    @org.jetbrains.annotations.NotNull()
    public abstract java.util.List<expo.modules.updates.db.entity.UpdateEntity> _loadLaunchableUpdatesForProjectWithStatuses(@org.jetbrains.annotations.NotNull()
    java.lang.String scopeKey, @org.jetbrains.annotations.NotNull()
    java.util.List<? extends expo.modules.updates.db.enums.UpdateStatus> statuses);
    
    @androidx.room.Query(value = "SELECT * FROM updates WHERE id = :id;")
    @org.jetbrains.annotations.NotNull()
    public abstract java.util.List<expo.modules.updates.db.entity.UpdateEntity> _loadUpdatesWithId(@org.jetbrains.annotations.NotNull()
    java.util.UUID id);
    
    @androidx.room.Query(value = "SELECT assets.* FROM assets INNER JOIN updates ON updates.launch_asset_id = assets.id WHERE updates.id = :updateId;")
    @org.jetbrains.annotations.Nullable()
    public abstract expo.modules.updates.db.entity.AssetEntity _loadLaunchAssetForUpdate(@org.jetbrains.annotations.NotNull()
    java.util.UUID updateId);
    
    @androidx.room.Query(value = "UPDATE updates SET keep = 1 WHERE id = :id;")
    public abstract void _keepUpdate(@org.jetbrains.annotations.NotNull()
    java.util.UUID id);
    
    @androidx.room.Query(value = "UPDATE updates SET status = :status WHERE id = :id;")
    public abstract void _markUpdateWithStatus(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.enums.UpdateStatus status, @org.jetbrains.annotations.NotNull()
    java.util.UUID id);
    
    @androidx.room.Query(value = "UPDATE updates SET status = :status WHERE id IN (SELECT DISTINCT update_id FROM updates_assets WHERE asset_id IN (:missingAssetIds));")
    public abstract void _markUpdatesWithMissingAssets(@org.jetbrains.annotations.NotNull()
    java.util.List<java.lang.Long> missingAssetIds, @org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.enums.UpdateStatus status);
    
    /**
     * for public use
     */
    @androidx.room.Query(value = "SELECT * FROM updates;")
    @org.jetbrains.annotations.NotNull()
    public abstract java.util.List<expo.modules.updates.db.entity.UpdateEntity> loadAllUpdates();
    
    @org.jetbrains.annotations.NotNull()
    public final java.util.List<expo.modules.updates.db.entity.UpdateEntity> loadLaunchableUpdatesForScope(@org.jetbrains.annotations.NotNull()
    java.lang.String scopeKey) {
        return null;
    }
    
    @androidx.room.Query(value = "SELECT * FROM updates WHERE status = :status;")
    @org.jetbrains.annotations.NotNull()
    public abstract java.util.List<expo.modules.updates.db.entity.UpdateEntity> loadAllUpdatesWithStatus(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.enums.UpdateStatus status);
    
    @androidx.room.Query(value = "SELECT id FROM updates WHERE status = :status;")
    @org.jetbrains.annotations.NotNull()
    public abstract java.util.List<java.util.UUID> loadAllUpdateIdsWithStatus(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.enums.UpdateStatus status);
    
    @androidx.room.Query(value = "SELECT id FROM updates WHERE failed_launch_count > 0 ORDER BY commit_time DESC LIMIT 5;")
    @org.jetbrains.annotations.NotNull()
    public abstract java.util.List<java.util.UUID> loadRecentUpdateIdsWithFailedLaunch();
    
    @org.jetbrains.annotations.Nullable()
    public final expo.modules.updates.db.entity.UpdateEntity loadUpdateWithId(@org.jetbrains.annotations.NotNull()
    java.util.UUID id) {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable()
    public final expo.modules.updates.db.entity.AssetEntity loadLaunchAssetForUpdate(@org.jetbrains.annotations.NotNull()
    java.util.UUID updateId) {
        return null;
    }
    
    @androidx.room.Insert()
    public abstract void insertUpdate(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update);
    
    public final void setUpdateScopeKey(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update, @org.jetbrains.annotations.NotNull()
    java.lang.String newScopeKey) {
    }
    
    @androidx.room.Query(value = "UPDATE updates SET scope_key = :newScopeKey WHERE id = :id;")
    public abstract void _setUpdateScopeKeyInternal(@org.jetbrains.annotations.NotNull()
    java.util.UUID id, @org.jetbrains.annotations.NotNull()
    java.lang.String newScopeKey);
    
    public final void setUpdateCommitTime(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update, @org.jetbrains.annotations.NotNull()
    java.util.Date commitTime) {
    }
    
    @androidx.room.Query(value = "UPDATE updates SET commit_time = :commitTime WHERE id = :id;")
    public abstract void _setUpdateCommitTime(@org.jetbrains.annotations.NotNull()
    java.util.UUID id, @org.jetbrains.annotations.NotNull()
    java.util.Date commitTime);
    
    @androidx.room.Transaction()
    public void markUpdateFinished(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update, boolean hasSkippedEmbeddedAssets) {
    }
    
    public final void markUpdateFinished(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update) {
    }
    
    public final void markUpdateAccessed(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update) {
    }
    
    @androidx.room.Query(value = "UPDATE updates SET last_accessed = :lastAccessed WHERE id = :id;")
    public abstract void _markUpdateAccessed(@org.jetbrains.annotations.NotNull()
    java.util.UUID id, @org.jetbrains.annotations.NotNull()
    java.util.Date lastAccessed);
    
    public final void incrementSuccessfulLaunchCount(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update) {
    }
    
    @androidx.room.Query(value = "UPDATE updates SET successful_launch_count = successful_launch_count + 1 WHERE id = :id;")
    public abstract void _incrementSuccessfulLaunchCount(@org.jetbrains.annotations.NotNull()
    java.util.UUID id);
    
    public final void incrementFailedLaunchCount(@org.jetbrains.annotations.NotNull()
    expo.modules.updates.db.entity.UpdateEntity update) {
    }
    
    @androidx.room.Query(value = "UPDATE updates SET failed_launch_count = failed_launch_count + 1 WHERE id = :id;")
    public abstract void _incrementFailedLaunchCount(@org.jetbrains.annotations.NotNull()
    java.util.UUID id);
    
    public final void markUpdatesWithMissingAssets(@org.jetbrains.annotations.NotNull()
    java.util.List<expo.modules.updates.db.entity.AssetEntity> missingAssets) {
    }
    
    @androidx.room.Delete()
    public abstract void deleteUpdates(@org.jetbrains.annotations.NotNull()
    java.util.List<expo.modules.updates.db.entity.UpdateEntity> updates);
}