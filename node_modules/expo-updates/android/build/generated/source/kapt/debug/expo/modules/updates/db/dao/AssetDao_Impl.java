package expo.modules.updates.db.dao;

import android.database.Cursor;
import android.net.Uri;
import androidx.annotation.NonNull;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import expo.modules.updates.db.Converters;
import expo.modules.updates.db.entity.AssetEntity;
import expo.modules.updates.db.entity.UpdateAssetEntity;
import expo.modules.updates.db.entity.UpdateEntity;
import expo.modules.updates.db.enums.HashType;
import java.lang.Class;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.annotation.processing.Generated;
import org.json.JSONObject;

@Generated("androidx.room.RoomProcessor")
@SuppressWarnings({"unchecked", "deprecation"})
public final class AssetDao_Impl extends AssetDao {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter<AssetEntity> __insertionAdapterOfAssetEntity;

  private final Converters __converters = new Converters();

  private final EntityInsertionAdapter<UpdateAssetEntity> __insertionAdapterOfUpdateAssetEntity;

  private final EntityDeletionOrUpdateAdapter<AssetEntity> __updateAdapterOfAssetEntity;

  private final SharedSQLiteStatement __preparedStmtOf_setUpdateLaunchAsset;

  private final SharedSQLiteStatement __preparedStmtOf_markAllAssetsForDeletion;

  private final SharedSQLiteStatement __preparedStmtOf_unmarkUsedAssetsFromDeletion;

  private final SharedSQLiteStatement __preparedStmtOf_unmarkUsedLaunchAssetsFromDeletion;

  private final SharedSQLiteStatement __preparedStmtOf_unmarkDuplicateUsedAssetsFromDeletion;

  private final SharedSQLiteStatement __preparedStmtOf_deleteAssetsMarkedForDeletion;

  public AssetDao_Impl(@NonNull final RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfAssetEntity = new EntityInsertionAdapter<AssetEntity>(__db) {
      @Override
      @NonNull
      protected String createQuery() {
        return "INSERT OR REPLACE INTO `assets` (`key`,`type`,`id`,`url`,`headers`,`extra_request_headers`,`metadata`,`download_time`,`relative_path`,`hash`,`hash_type`,`expected_hash`,`marked_for_deletion`) VALUES (?,?,nullif(?, 0),?,?,?,?,?,?,?,?,?,?)";
      }

      @Override
      protected void bind(@NonNull final SupportSQLiteStatement statement,
          @NonNull final AssetEntity entity) {
        if (entity.getKey() == null) {
          statement.bindNull(1);
        } else {
          statement.bindString(1, entity.getKey());
        }
        if (entity.getType() == null) {
          statement.bindNull(2);
        } else {
          statement.bindString(2, entity.getType());
        }
        statement.bindLong(3, entity.getId());
        final String _tmp = __converters.uriToString(entity.getUrl());
        if (_tmp == null) {
          statement.bindNull(4);
        } else {
          statement.bindString(4, _tmp);
        }
        final String _tmp_1 = __converters.jsonObjectToString(entity.getHeaders());
        if (_tmp_1 == null) {
          statement.bindNull(5);
        } else {
          statement.bindString(5, _tmp_1);
        }
        final String _tmp_2 = __converters.jsonObjectToString(entity.getExtraRequestHeaders());
        if (_tmp_2 == null) {
          statement.bindNull(6);
        } else {
          statement.bindString(6, _tmp_2);
        }
        final String _tmp_3 = __converters.jsonObjectToString(entity.getMetadata());
        if (_tmp_3 == null) {
          statement.bindNull(7);
        } else {
          statement.bindString(7, _tmp_3);
        }
        final Long _tmp_4 = __converters.dateToLong(entity.getDownloadTime());
        if (_tmp_4 == null) {
          statement.bindNull(8);
        } else {
          statement.bindLong(8, _tmp_4);
        }
        if (entity.getRelativePath() == null) {
          statement.bindNull(9);
        } else {
          statement.bindString(9, entity.getRelativePath());
        }
        if (entity.getHash() == null) {
          statement.bindNull(10);
        } else {
          statement.bindBlob(10, entity.getHash());
        }
        final int _tmp_5 = __converters.hashTypeToInt(entity.getHashType());
        statement.bindLong(11, _tmp_5);
        if (entity.getExpectedHash() == null) {
          statement.bindNull(12);
        } else {
          statement.bindString(12, entity.getExpectedHash());
        }
        final int _tmp_6 = entity.getMarkedForDeletion() ? 1 : 0;
        statement.bindLong(13, _tmp_6);
      }
    };
    this.__insertionAdapterOfUpdateAssetEntity = new EntityInsertionAdapter<UpdateAssetEntity>(__db) {
      @Override
      @NonNull
      protected String createQuery() {
        return "INSERT OR REPLACE INTO `updates_assets` (`update_id`,`asset_id`) VALUES (?,?)";
      }

      @Override
      protected void bind(@NonNull final SupportSQLiteStatement statement,
          @NonNull final UpdateAssetEntity entity) {
        final byte[] _tmp = __converters.uuidToBytes(entity.getUpdateId());
        if (_tmp == null) {
          statement.bindNull(1);
        } else {
          statement.bindBlob(1, _tmp);
        }
        statement.bindLong(2, entity.getAssetId());
      }
    };
    this.__updateAdapterOfAssetEntity = new EntityDeletionOrUpdateAdapter<AssetEntity>(__db) {
      @Override
      @NonNull
      protected String createQuery() {
        return "UPDATE OR ABORT `assets` SET `key` = ?,`type` = ?,`id` = ?,`url` = ?,`headers` = ?,`extra_request_headers` = ?,`metadata` = ?,`download_time` = ?,`relative_path` = ?,`hash` = ?,`hash_type` = ?,`expected_hash` = ?,`marked_for_deletion` = ? WHERE `id` = ?";
      }

      @Override
      protected void bind(@NonNull final SupportSQLiteStatement statement,
          @NonNull final AssetEntity entity) {
        if (entity.getKey() == null) {
          statement.bindNull(1);
        } else {
          statement.bindString(1, entity.getKey());
        }
        if (entity.getType() == null) {
          statement.bindNull(2);
        } else {
          statement.bindString(2, entity.getType());
        }
        statement.bindLong(3, entity.getId());
        final String _tmp = __converters.uriToString(entity.getUrl());
        if (_tmp == null) {
          statement.bindNull(4);
        } else {
          statement.bindString(4, _tmp);
        }
        final String _tmp_1 = __converters.jsonObjectToString(entity.getHeaders());
        if (_tmp_1 == null) {
          statement.bindNull(5);
        } else {
          statement.bindString(5, _tmp_1);
        }
        final String _tmp_2 = __converters.jsonObjectToString(entity.getExtraRequestHeaders());
        if (_tmp_2 == null) {
          statement.bindNull(6);
        } else {
          statement.bindString(6, _tmp_2);
        }
        final String _tmp_3 = __converters.jsonObjectToString(entity.getMetadata());
        if (_tmp_3 == null) {
          statement.bindNull(7);
        } else {
          statement.bindString(7, _tmp_3);
        }
        final Long _tmp_4 = __converters.dateToLong(entity.getDownloadTime());
        if (_tmp_4 == null) {
          statement.bindNull(8);
        } else {
          statement.bindLong(8, _tmp_4);
        }
        if (entity.getRelativePath() == null) {
          statement.bindNull(9);
        } else {
          statement.bindString(9, entity.getRelativePath());
        }
        if (entity.getHash() == null) {
          statement.bindNull(10);
        } else {
          statement.bindBlob(10, entity.getHash());
        }
        final int _tmp_5 = __converters.hashTypeToInt(entity.getHashType());
        statement.bindLong(11, _tmp_5);
        if (entity.getExpectedHash() == null) {
          statement.bindNull(12);
        } else {
          statement.bindString(12, entity.getExpectedHash());
        }
        final int _tmp_6 = entity.getMarkedForDeletion() ? 1 : 0;
        statement.bindLong(13, _tmp_6);
        statement.bindLong(14, entity.getId());
      }
    };
    this.__preparedStmtOf_setUpdateLaunchAsset = new SharedSQLiteStatement(__db) {
      @Override
      @NonNull
      public String createQuery() {
        final String _query = "UPDATE updates SET launch_asset_id = ? WHERE id = ?;";
        return _query;
      }
    };
    this.__preparedStmtOf_markAllAssetsForDeletion = new SharedSQLiteStatement(__db) {
      @Override
      @NonNull
      public String createQuery() {
        final String _query = "UPDATE assets SET marked_for_deletion = 1;";
        return _query;
      }
    };
    this.__preparedStmtOf_unmarkUsedAssetsFromDeletion = new SharedSQLiteStatement(__db) {
      @Override
      @NonNull
      public String createQuery() {
        final String _query = "UPDATE assets SET marked_for_deletion = 0 WHERE id IN ( SELECT asset_id FROM updates_assets INNER JOIN updates ON updates_assets.update_id = updates.id WHERE updates.keep);";
        return _query;
      }
    };
    this.__preparedStmtOf_unmarkUsedLaunchAssetsFromDeletion = new SharedSQLiteStatement(__db) {
      @Override
      @NonNull
      public String createQuery() {
        final String _query = "UPDATE assets SET marked_for_deletion = 0 WHERE id IN ( SELECT launch_asset_id FROM updates WHERE updates.keep);";
        return _query;
      }
    };
    this.__preparedStmtOf_unmarkDuplicateUsedAssetsFromDeletion = new SharedSQLiteStatement(__db) {
      @Override
      @NonNull
      public String createQuery() {
        final String _query = "UPDATE assets SET marked_for_deletion = 0 WHERE relative_path IN ( SELECT relative_path FROM assets WHERE marked_for_deletion = 0);";
        return _query;
      }
    };
    this.__preparedStmtOf_deleteAssetsMarkedForDeletion = new SharedSQLiteStatement(__db) {
      @Override
      @NonNull
      public String createQuery() {
        final String _query = "DELETE FROM assets WHERE marked_for_deletion = 1;";
        return _query;
      }
    };
  }

  @Override
  public long _insertAsset(final AssetEntity asset) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      final long _result = __insertionAdapterOfAssetEntity.insertAndReturnId(asset);
      __db.setTransactionSuccessful();
      return _result;
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void _insertUpdateAsset(final UpdateAssetEntity updateAsset) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __insertionAdapterOfUpdateAssetEntity.insert(updateAsset);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void updateAsset(final AssetEntity assetEntity) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __updateAdapterOfAssetEntity.handle(assetEntity);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void insertAssets(final List<AssetEntity> assets, final UpdateEntity update) {
    __db.beginTransaction();
    try {
      AssetDao_Impl.super.insertAssets(assets, update);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public boolean addExistingAssetToUpdate(final UpdateEntity update, final AssetEntity asset,
      final boolean isLaunchAsset) {
    __db.beginTransaction();
    try {
      final boolean _result;
      _result = AssetDao_Impl.super.addExistingAssetToUpdate(update, asset, isLaunchAsset);
      __db.setTransactionSuccessful();
      return _result;
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public List<AssetEntity> deleteUnusedAssets() {
    __db.beginTransaction();
    try {
      final List<AssetEntity> _result;
      _result = AssetDao_Impl.super.deleteUnusedAssets();
      __db.setTransactionSuccessful();
      return _result;
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void _setUpdateLaunchAsset(final long assetId, final UUID updateId) {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_setUpdateLaunchAsset.acquire();
    int _argIndex = 1;
    _stmt.bindLong(_argIndex, assetId);
    _argIndex = 2;
    final byte[] _tmp = __converters.uuidToBytes(updateId);
    if (_tmp == null) {
      _stmt.bindNull(_argIndex);
    } else {
      _stmt.bindBlob(_argIndex, _tmp);
    }
    try {
      __db.beginTransaction();
      try {
        _stmt.executeUpdateDelete();
        __db.setTransactionSuccessful();
      } finally {
        __db.endTransaction();
      }
    } finally {
      __preparedStmtOf_setUpdateLaunchAsset.release(_stmt);
    }
  }

  @Override
  public void _markAllAssetsForDeletion() {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_markAllAssetsForDeletion.acquire();
    try {
      __db.beginTransaction();
      try {
        _stmt.executeUpdateDelete();
        __db.setTransactionSuccessful();
      } finally {
        __db.endTransaction();
      }
    } finally {
      __preparedStmtOf_markAllAssetsForDeletion.release(_stmt);
    }
  }

  @Override
  public void _unmarkUsedAssetsFromDeletion() {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_unmarkUsedAssetsFromDeletion.acquire();
    try {
      __db.beginTransaction();
      try {
        _stmt.executeUpdateDelete();
        __db.setTransactionSuccessful();
      } finally {
        __db.endTransaction();
      }
    } finally {
      __preparedStmtOf_unmarkUsedAssetsFromDeletion.release(_stmt);
    }
  }

  @Override
  public void _unmarkUsedLaunchAssetsFromDeletion() {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_unmarkUsedLaunchAssetsFromDeletion.acquire();
    try {
      __db.beginTransaction();
      try {
        _stmt.executeUpdateDelete();
        __db.setTransactionSuccessful();
      } finally {
        __db.endTransaction();
      }
    } finally {
      __preparedStmtOf_unmarkUsedLaunchAssetsFromDeletion.release(_stmt);
    }
  }

  @Override
  public void _unmarkDuplicateUsedAssetsFromDeletion() {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_unmarkDuplicateUsedAssetsFromDeletion.acquire();
    try {
      __db.beginTransaction();
      try {
        _stmt.executeUpdateDelete();
        __db.setTransactionSuccessful();
      } finally {
        __db.endTransaction();
      }
    } finally {
      __preparedStmtOf_unmarkDuplicateUsedAssetsFromDeletion.release(_stmt);
    }
  }

  @Override
  public void _deleteAssetsMarkedForDeletion() {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOf_deleteAssetsMarkedForDeletion.acquire();
    try {
      __db.beginTransaction();
      try {
        _stmt.executeUpdateDelete();
        __db.setTransactionSuccessful();
      } finally {
        __db.endTransaction();
      }
    } finally {
      __preparedStmtOf_deleteAssetsMarkedForDeletion.release(_stmt);
    }
  }

  @Override
  public List<AssetEntity> _loadAssetsMarkedForDeletion() {
    final String _sql = "SELECT * FROM assets WHERE marked_for_deletion = 1;";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    __db.assertNotSuspendingTransaction();
    final Cursor _cursor = DBUtil.query(__db, _statement, false, null);
    try {
      final int _cursorIndexOfKey = CursorUtil.getColumnIndexOrThrow(_cursor, "key");
      final int _cursorIndexOfType = CursorUtil.getColumnIndexOrThrow(_cursor, "type");
      final int _cursorIndexOfId = CursorUtil.getColumnIndexOrThrow(_cursor, "id");
      final int _cursorIndexOfUrl = CursorUtil.getColumnIndexOrThrow(_cursor, "url");
      final int _cursorIndexOfHeaders = CursorUtil.getColumnIndexOrThrow(_cursor, "headers");
      final int _cursorIndexOfExtraRequestHeaders = CursorUtil.getColumnIndexOrThrow(_cursor, "extra_request_headers");
      final int _cursorIndexOfMetadata = CursorUtil.getColumnIndexOrThrow(_cursor, "metadata");
      final int _cursorIndexOfDownloadTime = CursorUtil.getColumnIndexOrThrow(_cursor, "download_time");
      final int _cursorIndexOfRelativePath = CursorUtil.getColumnIndexOrThrow(_cursor, "relative_path");
      final int _cursorIndexOfHash = CursorUtil.getColumnIndexOrThrow(_cursor, "hash");
      final int _cursorIndexOfHashType = CursorUtil.getColumnIndexOrThrow(_cursor, "hash_type");
      final int _cursorIndexOfExpectedHash = CursorUtil.getColumnIndexOrThrow(_cursor, "expected_hash");
      final int _cursorIndexOfMarkedForDeletion = CursorUtil.getColumnIndexOrThrow(_cursor, "marked_for_deletion");
      final List<AssetEntity> _result = new ArrayList<AssetEntity>(_cursor.getCount());
      while (_cursor.moveToNext()) {
        final AssetEntity _item;
        final String _tmpKey;
        if (_cursor.isNull(_cursorIndexOfKey)) {
          _tmpKey = null;
        } else {
          _tmpKey = _cursor.getString(_cursorIndexOfKey);
        }
        final String _tmpType;
        if (_cursor.isNull(_cursorIndexOfType)) {
          _tmpType = null;
        } else {
          _tmpType = _cursor.getString(_cursorIndexOfType);
        }
        _item = new AssetEntity(_tmpKey,_tmpType);
        final long _tmpId;
        _tmpId = _cursor.getLong(_cursorIndexOfId);
        _item.setId(_tmpId);
        final Uri _tmpUrl;
        final String _tmp;
        if (_cursor.isNull(_cursorIndexOfUrl)) {
          _tmp = null;
        } else {
          _tmp = _cursor.getString(_cursorIndexOfUrl);
        }
        _tmpUrl = __converters.stringToUri(_tmp);
        _item.setUrl(_tmpUrl);
        final JSONObject _tmpHeaders;
        final String _tmp_1;
        if (_cursor.isNull(_cursorIndexOfHeaders)) {
          _tmp_1 = null;
        } else {
          _tmp_1 = _cursor.getString(_cursorIndexOfHeaders);
        }
        _tmpHeaders = __converters.stringToJsonObject(_tmp_1);
        _item.setHeaders(_tmpHeaders);
        final JSONObject _tmpExtraRequestHeaders;
        final String _tmp_2;
        if (_cursor.isNull(_cursorIndexOfExtraRequestHeaders)) {
          _tmp_2 = null;
        } else {
          _tmp_2 = _cursor.getString(_cursorIndexOfExtraRequestHeaders);
        }
        _tmpExtraRequestHeaders = __converters.stringToJsonObject(_tmp_2);
        _item.setExtraRequestHeaders(_tmpExtraRequestHeaders);
        final JSONObject _tmpMetadata;
        final String _tmp_3;
        if (_cursor.isNull(_cursorIndexOfMetadata)) {
          _tmp_3 = null;
        } else {
          _tmp_3 = _cursor.getString(_cursorIndexOfMetadata);
        }
        _tmpMetadata = __converters.stringToJsonObject(_tmp_3);
        _item.setMetadata(_tmpMetadata);
        final Date _tmpDownloadTime;
        final Long _tmp_4;
        if (_cursor.isNull(_cursorIndexOfDownloadTime)) {
          _tmp_4 = null;
        } else {
          _tmp_4 = _cursor.getLong(_cursorIndexOfDownloadTime);
        }
        _tmpDownloadTime = __converters.longToDate(_tmp_4);
        _item.setDownloadTime(_tmpDownloadTime);
        final String _tmpRelativePath;
        if (_cursor.isNull(_cursorIndexOfRelativePath)) {
          _tmpRelativePath = null;
        } else {
          _tmpRelativePath = _cursor.getString(_cursorIndexOfRelativePath);
        }
        _item.setRelativePath(_tmpRelativePath);
        final byte[] _tmpHash;
        if (_cursor.isNull(_cursorIndexOfHash)) {
          _tmpHash = null;
        } else {
          _tmpHash = _cursor.getBlob(_cursorIndexOfHash);
        }
        _item.setHash(_tmpHash);
        final HashType _tmpHashType;
        final int _tmp_5;
        _tmp_5 = _cursor.getInt(_cursorIndexOfHashType);
        _tmpHashType = __converters.intToHashType(_tmp_5);
        _item.setHashType(_tmpHashType);
        final String _tmpExpectedHash;
        if (_cursor.isNull(_cursorIndexOfExpectedHash)) {
          _tmpExpectedHash = null;
        } else {
          _tmpExpectedHash = _cursor.getString(_cursorIndexOfExpectedHash);
        }
        _item.setExpectedHash(_tmpExpectedHash);
        final boolean _tmpMarkedForDeletion;
        final int _tmp_6;
        _tmp_6 = _cursor.getInt(_cursorIndexOfMarkedForDeletion);
        _tmpMarkedForDeletion = _tmp_6 != 0;
        _item.setMarkedForDeletion(_tmpMarkedForDeletion);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public List<AssetEntity> _loadAssetWithKey(final String key) {
    final String _sql = "SELECT * FROM assets WHERE `key` = ? LIMIT 1;";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    if (key == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, key);
    }
    __db.assertNotSuspendingTransaction();
    final Cursor _cursor = DBUtil.query(__db, _statement, false, null);
    try {
      final int _cursorIndexOfKey = CursorUtil.getColumnIndexOrThrow(_cursor, "key");
      final int _cursorIndexOfType = CursorUtil.getColumnIndexOrThrow(_cursor, "type");
      final int _cursorIndexOfId = CursorUtil.getColumnIndexOrThrow(_cursor, "id");
      final int _cursorIndexOfUrl = CursorUtil.getColumnIndexOrThrow(_cursor, "url");
      final int _cursorIndexOfHeaders = CursorUtil.getColumnIndexOrThrow(_cursor, "headers");
      final int _cursorIndexOfExtraRequestHeaders = CursorUtil.getColumnIndexOrThrow(_cursor, "extra_request_headers");
      final int _cursorIndexOfMetadata = CursorUtil.getColumnIndexOrThrow(_cursor, "metadata");
      final int _cursorIndexOfDownloadTime = CursorUtil.getColumnIndexOrThrow(_cursor, "download_time");
      final int _cursorIndexOfRelativePath = CursorUtil.getColumnIndexOrThrow(_cursor, "relative_path");
      final int _cursorIndexOfHash = CursorUtil.getColumnIndexOrThrow(_cursor, "hash");
      final int _cursorIndexOfHashType = CursorUtil.getColumnIndexOrThrow(_cursor, "hash_type");
      final int _cursorIndexOfExpectedHash = CursorUtil.getColumnIndexOrThrow(_cursor, "expected_hash");
      final int _cursorIndexOfMarkedForDeletion = CursorUtil.getColumnIndexOrThrow(_cursor, "marked_for_deletion");
      final List<AssetEntity> _result = new ArrayList<AssetEntity>(_cursor.getCount());
      while (_cursor.moveToNext()) {
        final AssetEntity _item;
        final String _tmpKey;
        if (_cursor.isNull(_cursorIndexOfKey)) {
          _tmpKey = null;
        } else {
          _tmpKey = _cursor.getString(_cursorIndexOfKey);
        }
        final String _tmpType;
        if (_cursor.isNull(_cursorIndexOfType)) {
          _tmpType = null;
        } else {
          _tmpType = _cursor.getString(_cursorIndexOfType);
        }
        _item = new AssetEntity(_tmpKey,_tmpType);
        final long _tmpId;
        _tmpId = _cursor.getLong(_cursorIndexOfId);
        _item.setId(_tmpId);
        final Uri _tmpUrl;
        final String _tmp;
        if (_cursor.isNull(_cursorIndexOfUrl)) {
          _tmp = null;
        } else {
          _tmp = _cursor.getString(_cursorIndexOfUrl);
        }
        _tmpUrl = __converters.stringToUri(_tmp);
        _item.setUrl(_tmpUrl);
        final JSONObject _tmpHeaders;
        final String _tmp_1;
        if (_cursor.isNull(_cursorIndexOfHeaders)) {
          _tmp_1 = null;
        } else {
          _tmp_1 = _cursor.getString(_cursorIndexOfHeaders);
        }
        _tmpHeaders = __converters.stringToJsonObject(_tmp_1);
        _item.setHeaders(_tmpHeaders);
        final JSONObject _tmpExtraRequestHeaders;
        final String _tmp_2;
        if (_cursor.isNull(_cursorIndexOfExtraRequestHeaders)) {
          _tmp_2 = null;
        } else {
          _tmp_2 = _cursor.getString(_cursorIndexOfExtraRequestHeaders);
        }
        _tmpExtraRequestHeaders = __converters.stringToJsonObject(_tmp_2);
        _item.setExtraRequestHeaders(_tmpExtraRequestHeaders);
        final JSONObject _tmpMetadata;
        final String _tmp_3;
        if (_cursor.isNull(_cursorIndexOfMetadata)) {
          _tmp_3 = null;
        } else {
          _tmp_3 = _cursor.getString(_cursorIndexOfMetadata);
        }
        _tmpMetadata = __converters.stringToJsonObject(_tmp_3);
        _item.setMetadata(_tmpMetadata);
        final Date _tmpDownloadTime;
        final Long _tmp_4;
        if (_cursor.isNull(_cursorIndexOfDownloadTime)) {
          _tmp_4 = null;
        } else {
          _tmp_4 = _cursor.getLong(_cursorIndexOfDownloadTime);
        }
        _tmpDownloadTime = __converters.longToDate(_tmp_4);
        _item.setDownloadTime(_tmpDownloadTime);
        final String _tmpRelativePath;
        if (_cursor.isNull(_cursorIndexOfRelativePath)) {
          _tmpRelativePath = null;
        } else {
          _tmpRelativePath = _cursor.getString(_cursorIndexOfRelativePath);
        }
        _item.setRelativePath(_tmpRelativePath);
        final byte[] _tmpHash;
        if (_cursor.isNull(_cursorIndexOfHash)) {
          _tmpHash = null;
        } else {
          _tmpHash = _cursor.getBlob(_cursorIndexOfHash);
        }
        _item.setHash(_tmpHash);
        final HashType _tmpHashType;
        final int _tmp_5;
        _tmp_5 = _cursor.getInt(_cursorIndexOfHashType);
        _tmpHashType = __converters.intToHashType(_tmp_5);
        _item.setHashType(_tmpHashType);
        final String _tmpExpectedHash;
        if (_cursor.isNull(_cursorIndexOfExpectedHash)) {
          _tmpExpectedHash = null;
        } else {
          _tmpExpectedHash = _cursor.getString(_cursorIndexOfExpectedHash);
        }
        _item.setExpectedHash(_tmpExpectedHash);
        final boolean _tmpMarkedForDeletion;
        final int _tmp_6;
        _tmp_6 = _cursor.getInt(_cursorIndexOfMarkedForDeletion);
        _tmpMarkedForDeletion = _tmp_6 != 0;
        _item.setMarkedForDeletion(_tmpMarkedForDeletion);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public List<AssetEntity> loadAllAssets() {
    final String _sql = "SELECT * FROM assets;";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    __db.assertNotSuspendingTransaction();
    final Cursor _cursor = DBUtil.query(__db, _statement, false, null);
    try {
      final int _cursorIndexOfKey = CursorUtil.getColumnIndexOrThrow(_cursor, "key");
      final int _cursorIndexOfType = CursorUtil.getColumnIndexOrThrow(_cursor, "type");
      final int _cursorIndexOfId = CursorUtil.getColumnIndexOrThrow(_cursor, "id");
      final int _cursorIndexOfUrl = CursorUtil.getColumnIndexOrThrow(_cursor, "url");
      final int _cursorIndexOfHeaders = CursorUtil.getColumnIndexOrThrow(_cursor, "headers");
      final int _cursorIndexOfExtraRequestHeaders = CursorUtil.getColumnIndexOrThrow(_cursor, "extra_request_headers");
      final int _cursorIndexOfMetadata = CursorUtil.getColumnIndexOrThrow(_cursor, "metadata");
      final int _cursorIndexOfDownloadTime = CursorUtil.getColumnIndexOrThrow(_cursor, "download_time");
      final int _cursorIndexOfRelativePath = CursorUtil.getColumnIndexOrThrow(_cursor, "relative_path");
      final int _cursorIndexOfHash = CursorUtil.getColumnIndexOrThrow(_cursor, "hash");
      final int _cursorIndexOfHashType = CursorUtil.getColumnIndexOrThrow(_cursor, "hash_type");
      final int _cursorIndexOfExpectedHash = CursorUtil.getColumnIndexOrThrow(_cursor, "expected_hash");
      final int _cursorIndexOfMarkedForDeletion = CursorUtil.getColumnIndexOrThrow(_cursor, "marked_for_deletion");
      final List<AssetEntity> _result = new ArrayList<AssetEntity>(_cursor.getCount());
      while (_cursor.moveToNext()) {
        final AssetEntity _item;
        final String _tmpKey;
        if (_cursor.isNull(_cursorIndexOfKey)) {
          _tmpKey = null;
        } else {
          _tmpKey = _cursor.getString(_cursorIndexOfKey);
        }
        final String _tmpType;
        if (_cursor.isNull(_cursorIndexOfType)) {
          _tmpType = null;
        } else {
          _tmpType = _cursor.getString(_cursorIndexOfType);
        }
        _item = new AssetEntity(_tmpKey,_tmpType);
        final long _tmpId;
        _tmpId = _cursor.getLong(_cursorIndexOfId);
        _item.setId(_tmpId);
        final Uri _tmpUrl;
        final String _tmp;
        if (_cursor.isNull(_cursorIndexOfUrl)) {
          _tmp = null;
        } else {
          _tmp = _cursor.getString(_cursorIndexOfUrl);
        }
        _tmpUrl = __converters.stringToUri(_tmp);
        _item.setUrl(_tmpUrl);
        final JSONObject _tmpHeaders;
        final String _tmp_1;
        if (_cursor.isNull(_cursorIndexOfHeaders)) {
          _tmp_1 = null;
        } else {
          _tmp_1 = _cursor.getString(_cursorIndexOfHeaders);
        }
        _tmpHeaders = __converters.stringToJsonObject(_tmp_1);
        _item.setHeaders(_tmpHeaders);
        final JSONObject _tmpExtraRequestHeaders;
        final String _tmp_2;
        if (_cursor.isNull(_cursorIndexOfExtraRequestHeaders)) {
          _tmp_2 = null;
        } else {
          _tmp_2 = _cursor.getString(_cursorIndexOfExtraRequestHeaders);
        }
        _tmpExtraRequestHeaders = __converters.stringToJsonObject(_tmp_2);
        _item.setExtraRequestHeaders(_tmpExtraRequestHeaders);
        final JSONObject _tmpMetadata;
        final String _tmp_3;
        if (_cursor.isNull(_cursorIndexOfMetadata)) {
          _tmp_3 = null;
        } else {
          _tmp_3 = _cursor.getString(_cursorIndexOfMetadata);
        }
        _tmpMetadata = __converters.stringToJsonObject(_tmp_3);
        _item.setMetadata(_tmpMetadata);
        final Date _tmpDownloadTime;
        final Long _tmp_4;
        if (_cursor.isNull(_cursorIndexOfDownloadTime)) {
          _tmp_4 = null;
        } else {
          _tmp_4 = _cursor.getLong(_cursorIndexOfDownloadTime);
        }
        _tmpDownloadTime = __converters.longToDate(_tmp_4);
        _item.setDownloadTime(_tmpDownloadTime);
        final String _tmpRelativePath;
        if (_cursor.isNull(_cursorIndexOfRelativePath)) {
          _tmpRelativePath = null;
        } else {
          _tmpRelativePath = _cursor.getString(_cursorIndexOfRelativePath);
        }
        _item.setRelativePath(_tmpRelativePath);
        final byte[] _tmpHash;
        if (_cursor.isNull(_cursorIndexOfHash)) {
          _tmpHash = null;
        } else {
          _tmpHash = _cursor.getBlob(_cursorIndexOfHash);
        }
        _item.setHash(_tmpHash);
        final HashType _tmpHashType;
        final int _tmp_5;
        _tmp_5 = _cursor.getInt(_cursorIndexOfHashType);
        _tmpHashType = __converters.intToHashType(_tmp_5);
        _item.setHashType(_tmpHashType);
        final String _tmpExpectedHash;
        if (_cursor.isNull(_cursorIndexOfExpectedHash)) {
          _tmpExpectedHash = null;
        } else {
          _tmpExpectedHash = _cursor.getString(_cursorIndexOfExpectedHash);
        }
        _item.setExpectedHash(_tmpExpectedHash);
        final boolean _tmpMarkedForDeletion;
        final int _tmp_6;
        _tmp_6 = _cursor.getInt(_cursorIndexOfMarkedForDeletion);
        _tmpMarkedForDeletion = _tmp_6 != 0;
        _item.setMarkedForDeletion(_tmpMarkedForDeletion);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public List<AssetEntity> loadAssetsForUpdate(final UUID id) {
    final String _sql = "SELECT assets.* FROM assets INNER JOIN updates_assets ON updates_assets.asset_id = assets.id INNER JOIN updates ON updates_assets.update_id = updates.id WHERE updates.id = ?;";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    final byte[] _tmp = __converters.uuidToBytes(id);
    if (_tmp == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindBlob(_argIndex, _tmp);
    }
    __db.assertNotSuspendingTransaction();
    final Cursor _cursor = DBUtil.query(__db, _statement, false, null);
    try {
      final int _cursorIndexOfKey = CursorUtil.getColumnIndexOrThrow(_cursor, "key");
      final int _cursorIndexOfType = CursorUtil.getColumnIndexOrThrow(_cursor, "type");
      final int _cursorIndexOfId = CursorUtil.getColumnIndexOrThrow(_cursor, "id");
      final int _cursorIndexOfUrl = CursorUtil.getColumnIndexOrThrow(_cursor, "url");
      final int _cursorIndexOfHeaders = CursorUtil.getColumnIndexOrThrow(_cursor, "headers");
      final int _cursorIndexOfExtraRequestHeaders = CursorUtil.getColumnIndexOrThrow(_cursor, "extra_request_headers");
      final int _cursorIndexOfMetadata = CursorUtil.getColumnIndexOrThrow(_cursor, "metadata");
      final int _cursorIndexOfDownloadTime = CursorUtil.getColumnIndexOrThrow(_cursor, "download_time");
      final int _cursorIndexOfRelativePath = CursorUtil.getColumnIndexOrThrow(_cursor, "relative_path");
      final int _cursorIndexOfHash = CursorUtil.getColumnIndexOrThrow(_cursor, "hash");
      final int _cursorIndexOfHashType = CursorUtil.getColumnIndexOrThrow(_cursor, "hash_type");
      final int _cursorIndexOfExpectedHash = CursorUtil.getColumnIndexOrThrow(_cursor, "expected_hash");
      final int _cursorIndexOfMarkedForDeletion = CursorUtil.getColumnIndexOrThrow(_cursor, "marked_for_deletion");
      final List<AssetEntity> _result = new ArrayList<AssetEntity>(_cursor.getCount());
      while (_cursor.moveToNext()) {
        final AssetEntity _item;
        final String _tmpKey;
        if (_cursor.isNull(_cursorIndexOfKey)) {
          _tmpKey = null;
        } else {
          _tmpKey = _cursor.getString(_cursorIndexOfKey);
        }
        final String _tmpType;
        if (_cursor.isNull(_cursorIndexOfType)) {
          _tmpType = null;
        } else {
          _tmpType = _cursor.getString(_cursorIndexOfType);
        }
        _item = new AssetEntity(_tmpKey,_tmpType);
        final long _tmpId;
        _tmpId = _cursor.getLong(_cursorIndexOfId);
        _item.setId(_tmpId);
        final Uri _tmpUrl;
        final String _tmp_1;
        if (_cursor.isNull(_cursorIndexOfUrl)) {
          _tmp_1 = null;
        } else {
          _tmp_1 = _cursor.getString(_cursorIndexOfUrl);
        }
        _tmpUrl = __converters.stringToUri(_tmp_1);
        _item.setUrl(_tmpUrl);
        final JSONObject _tmpHeaders;
        final String _tmp_2;
        if (_cursor.isNull(_cursorIndexOfHeaders)) {
          _tmp_2 = null;
        } else {
          _tmp_2 = _cursor.getString(_cursorIndexOfHeaders);
        }
        _tmpHeaders = __converters.stringToJsonObject(_tmp_2);
        _item.setHeaders(_tmpHeaders);
        final JSONObject _tmpExtraRequestHeaders;
        final String _tmp_3;
        if (_cursor.isNull(_cursorIndexOfExtraRequestHeaders)) {
          _tmp_3 = null;
        } else {
          _tmp_3 = _cursor.getString(_cursorIndexOfExtraRequestHeaders);
        }
        _tmpExtraRequestHeaders = __converters.stringToJsonObject(_tmp_3);
        _item.setExtraRequestHeaders(_tmpExtraRequestHeaders);
        final JSONObject _tmpMetadata;
        final String _tmp_4;
        if (_cursor.isNull(_cursorIndexOfMetadata)) {
          _tmp_4 = null;
        } else {
          _tmp_4 = _cursor.getString(_cursorIndexOfMetadata);
        }
        _tmpMetadata = __converters.stringToJsonObject(_tmp_4);
        _item.setMetadata(_tmpMetadata);
        final Date _tmpDownloadTime;
        final Long _tmp_5;
        if (_cursor.isNull(_cursorIndexOfDownloadTime)) {
          _tmp_5 = null;
        } else {
          _tmp_5 = _cursor.getLong(_cursorIndexOfDownloadTime);
        }
        _tmpDownloadTime = __converters.longToDate(_tmp_5);
        _item.setDownloadTime(_tmpDownloadTime);
        final String _tmpRelativePath;
        if (_cursor.isNull(_cursorIndexOfRelativePath)) {
          _tmpRelativePath = null;
        } else {
          _tmpRelativePath = _cursor.getString(_cursorIndexOfRelativePath);
        }
        _item.setRelativePath(_tmpRelativePath);
        final byte[] _tmpHash;
        if (_cursor.isNull(_cursorIndexOfHash)) {
          _tmpHash = null;
        } else {
          _tmpHash = _cursor.getBlob(_cursorIndexOfHash);
        }
        _item.setHash(_tmpHash);
        final HashType _tmpHashType;
        final int _tmp_6;
        _tmp_6 = _cursor.getInt(_cursorIndexOfHashType);
        _tmpHashType = __converters.intToHashType(_tmp_6);
        _item.setHashType(_tmpHashType);
        final String _tmpExpectedHash;
        if (_cursor.isNull(_cursorIndexOfExpectedHash)) {
          _tmpExpectedHash = null;
        } else {
          _tmpExpectedHash = _cursor.getString(_cursorIndexOfExpectedHash);
        }
        _item.setExpectedHash(_tmpExpectedHash);
        final boolean _tmpMarkedForDeletion;
        final int _tmp_7;
        _tmp_7 = _cursor.getInt(_cursorIndexOfMarkedForDeletion);
        _tmpMarkedForDeletion = _tmp_7 != 0;
        _item.setMarkedForDeletion(_tmpMarkedForDeletion);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @NonNull
  public static List<Class<?>> getRequiredConverters() {
    return Collections.emptyList();
  }
}
