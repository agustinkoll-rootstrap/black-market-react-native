{"version":3,"names":["React","forwardRef","useCallback","useMemo","findNodeHandle","Reanimated","interpolate","scrollTo","useAnimatedReaction","useAnimatedRef","useAnimatedStyle","useScrollViewOffset","useSharedValue","useFocusedInputHandler","useReanimatedFocusedInput","useWindowDimensions","useSmoothKeyboardHandler","debounce","scrollDistanceWithRespectToSnapPoints","KeyboardAwareScrollView","children","onLayout","bottomOffset","disableScrollOnKeyboardHide","enabled","extraKeyboardSpace","snapToOffsets","rest","ref","scrollViewAnimatedRef","scrollViewTarget","scrollPosition","position","currentKeyboardFrameHeight","keyboardHeight","keyboardWillAppear","tag","initialKeyboardSize","scrollBeforeKeyboardMovement","input","layout","height","onRef","assignedRef","current","onScrollViewLayout","e","value","maybeScroll","animated","_layout$value","_layout$value2","_layout$value3","parentScrollViewTarget","visibleRect","absoluteY","inputHeight","point","relativeScrollTo","interpolatedScrollTo","targetScrollY","Math","max","positionOnScreen","topOfScreen","scrollFromCurrentPosition","customHeight","_input$value","prevScrollPosition","prevLayout","onChangeText","_layout$value4","_input$value2","onSelectionChange","selection","start","end","y","onChangeTextHandler","onStart","keyboardWillChangeSize","keyboardWillHide","focusWasChanged","target","onMove","keyboardFrame","onEnd","previous","view","paddingBottom","createElement","ScrollView","_extends","scrollEventThrottle","View","style"],"sources":["index.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useMemo } from \"react\";\nimport { findNodeHandle } from \"react-native\";\nimport Reanimated, {\n  interpolate,\n  scrollTo,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useAnimatedStyle,\n  useScrollViewOffset,\n  useSharedValue,\n} from \"react-native-reanimated\";\n\nimport {\n  useFocusedInputHandler,\n  useReanimatedFocusedInput,\n  useWindowDimensions,\n} from \"react-native-keyboard-controller\";\n\nimport { useSmoothKeyboardHandler } from \"./useSmoothKeyboardHandler\";\nimport { debounce, scrollDistanceWithRespectToSnapPoints } from \"./utils\";\n\nimport type {\n  LayoutChangeEvent,\n  ScrollView,\n  ScrollViewProps,\n} from \"react-native\";\nimport type {\n  FocusedInputLayoutChangedEvent,\n  FocusedInputSelectionChangedEvent,\n} from \"react-native-keyboard-controller\";\n\nexport type KeyboardAwareScrollViewProps = {\n  /** The distance between keyboard and focused `TextInput` when keyboard is shown. Default is `0`. */\n  bottomOffset?: number;\n  /** Prevents automatic scrolling of the `ScrollView` when the keyboard gets hidden, maintaining the current screen position. Default is `false`. */\n  disableScrollOnKeyboardHide?: boolean;\n  /** Controls whether this `KeyboardAwareScrollView` instance should take effect. Default is `true` */\n  enabled?: boolean;\n  /** Adjusting the bottom spacing of KeyboardAwareScrollView. Default is `0` */\n  extraKeyboardSpace?: number;\n} & ScrollViewProps;\n\n/*\n * Everything begins from `onStart` handler. This handler is called every time,\n * when keyboard changes its size or when focused `TextInput` was changed. In\n * this handler we are calculating/memoizing values which later will be used\n * during layout movement. For that we calculate:\n * - layout of focused field (`layout`) - to understand whether there will be overlap\n * - initial keyboard size (`initialKeyboardSize`) - used in scroll interpolation\n * - future keyboard height (`keyboardHeight`) - used in scroll interpolation\n * - current scroll position (`scrollPosition`) - used to scroll from this point\n *\n * Once we've calculated all necessary variables - we can actually start to use them.\n * It happens in `onMove` handler - this function simply calls `maybeScroll` with\n * current keyboard frame height. This functions makes the smooth transition.\n *\n * When the transition has finished we go to `onEnd` handler. In this handler\n * we verify, that the current field is not overlapped within a keyboard frame.\n * For full `onStart`/`onMove`/`onEnd` flow it may look like a redundant thing,\n * however there could be some cases, when `onMove` is not called:\n * - on iOS when TextInput was changed - keyboard transition is instant\n * - on Android when TextInput was changed and keyboard size wasn't changed\n * So `onEnd` handler handle the case, when `onMove` wasn't triggered.\n *\n * ====================================================================================================================+\n * -----------------------------------------------------Flow chart-----------------------------------------------------+\n * ====================================================================================================================+\n *\n * +============================+       +============================+        +==================================+\n * +  User Press on TextInput   +   =>  +  Keyboard starts showing   +   =>   + As keyboard moves frame by frame +  =>\n * +                            +       +       (run `onStart`)      +        +    `onMove` is getting called    +\n * +============================+       +============================+        +==================================+\n *\n *\n * +============================+       +============================+        +=====================================+\n * + Keyboard is shown and we   +   =>  +    User moved focus to     +   =>   + Only `onStart`/`onEnd` maybe called +\n * +    call `onEnd` handler    +       +     another `TextInput`    +        +    (without involving `onMove`)     +\n * +============================+       +============================+        +=====================================+\n *\n */\nconst KeyboardAwareScrollView = forwardRef<\n  ScrollView,\n  React.PropsWithChildren<KeyboardAwareScrollViewProps>\n>(\n  (\n    {\n      children,\n      onLayout,\n      bottomOffset = 0,\n      disableScrollOnKeyboardHide = false,\n      enabled = true,\n      extraKeyboardSpace = 0,\n      snapToOffsets,\n      ...rest\n    },\n    ref,\n  ) => {\n    const scrollViewAnimatedRef = useAnimatedRef<Reanimated.ScrollView>();\n    const scrollViewTarget = useSharedValue<number | null>(null);\n    const scrollPosition = useSharedValue(0);\n    const position = useScrollViewOffset(scrollViewAnimatedRef);\n    const currentKeyboardFrameHeight = useSharedValue(0);\n    const keyboardHeight = useSharedValue(0);\n    const keyboardWillAppear = useSharedValue(false);\n    const tag = useSharedValue(-1);\n    const initialKeyboardSize = useSharedValue(0);\n    const scrollBeforeKeyboardMovement = useSharedValue(0);\n    const { input } = useReanimatedFocusedInput();\n    const layout = useSharedValue<FocusedInputLayoutChangedEvent | null>(null);\n\n    const { height } = useWindowDimensions();\n\n    const onRef = useCallback((assignedRef: Reanimated.ScrollView) => {\n      if (typeof ref === \"function\") {\n        ref(assignedRef);\n      } else if (ref) {\n        ref.current = assignedRef;\n      }\n\n      scrollViewAnimatedRef(assignedRef);\n    }, []);\n    const onScrollViewLayout = useCallback(\n      (e: LayoutChangeEvent) => {\n        scrollViewTarget.value = findNodeHandle(scrollViewAnimatedRef.current);\n\n        onLayout?.(e);\n      },\n      [onLayout],\n    );\n\n    /**\n     * Function that will scroll a ScrollView as keyboard gets moving\n     */\n    const maybeScroll = useCallback(\n      (e: number, animated: boolean = false) => {\n        \"worklet\";\n\n        if (!enabled) {\n          return 0;\n        }\n\n        // input belongs to ScrollView\n        if (layout.value?.parentScrollViewTarget !== scrollViewTarget.value) {\n          return 0;\n        }\n\n        const visibleRect = height - keyboardHeight.value;\n        const absoluteY = layout.value?.layout.absoluteY || 0;\n        const inputHeight = layout.value?.layout.height || 0;\n        const point = absoluteY + inputHeight;\n\n        if (visibleRect - point <= bottomOffset) {\n          const relativeScrollTo =\n            keyboardHeight.value - (height - point) + bottomOffset;\n          const interpolatedScrollTo = interpolate(\n            e,\n            [initialKeyboardSize.value, keyboardHeight.value],\n            [\n              0,\n              scrollDistanceWithRespectToSnapPoints(\n                relativeScrollTo + scrollPosition.value,\n                snapToOffsets,\n              ) - scrollPosition.value,\n            ],\n          );\n          const targetScrollY =\n            Math.max(interpolatedScrollTo, 0) + scrollPosition.value;\n\n          scrollTo(scrollViewAnimatedRef, 0, targetScrollY, animated);\n\n          return interpolatedScrollTo;\n        }\n\n        if (absoluteY < 0) {\n          const positionOnScreen = visibleRect - inputHeight - bottomOffset;\n          const topOfScreen = scrollPosition.value + absoluteY;\n\n          scrollTo(\n            scrollViewAnimatedRef,\n            0,\n            topOfScreen - positionOnScreen,\n            animated,\n          );\n        }\n\n        return 0;\n      },\n      [bottomOffset, enabled, height, snapToOffsets],\n    );\n\n    const scrollFromCurrentPosition = useCallback(\n      (customHeight?: number) => {\n        \"worklet\";\n\n        const prevScrollPosition = scrollPosition.value;\n        const prevLayout = layout.value;\n\n        if (!input.value?.layout) {\n          return;\n        }\n\n        // eslint-disable-next-line react-compiler/react-compiler\n        layout.value = {\n          ...input.value,\n          layout: {\n            ...input.value.layout,\n            height: customHeight ?? input.value.layout.height,\n          },\n        };\n        scrollPosition.value = position.value;\n        maybeScroll(keyboardHeight.value, true);\n        scrollPosition.value = prevScrollPosition;\n        layout.value = prevLayout;\n      },\n      [maybeScroll],\n    );\n    const onChangeText = useCallback(() => {\n      \"worklet\";\n\n      // if typing a text caused layout shift, then we need to ignore this handler\n      // because this event will be handled in `useAnimatedReaction` below\n      if (layout.value?.layout.height !== input.value?.layout.height) {\n        return;\n      }\n\n      scrollFromCurrentPosition();\n    }, [scrollFromCurrentPosition]);\n    const onSelectionChange = useCallback(\n      (e: FocusedInputSelectionChangedEvent) => {\n        \"worklet\";\n\n        if (e.selection.start.position !== e.selection.end.position) {\n          scrollFromCurrentPosition(e.selection.end.y);\n        }\n      },\n      [scrollFromCurrentPosition],\n    );\n\n    const onChangeTextHandler = useMemo(\n      () => debounce(onChangeText, 200),\n      [onChangeText],\n    );\n\n    useFocusedInputHandler(\n      {\n        onChangeText: onChangeTextHandler,\n        onSelectionChange: onSelectionChange,\n      },\n      [onChangeTextHandler, onSelectionChange],\n    );\n\n    useSmoothKeyboardHandler(\n      {\n        onStart: (e) => {\n          \"worklet\";\n\n          const keyboardWillChangeSize =\n            keyboardHeight.value !== e.height && e.height > 0;\n\n          keyboardWillAppear.value = e.height > 0 && keyboardHeight.value === 0;\n\n          const keyboardWillHide = e.height === 0;\n          const focusWasChanged =\n            (tag.value !== e.target && e.target !== -1) ||\n            keyboardWillChangeSize;\n\n          if (keyboardWillChangeSize) {\n            initialKeyboardSize.value = keyboardHeight.value;\n          }\n\n          if (keyboardWillHide) {\n            // on back transition need to interpolate as [0, keyboardHeight]\n            initialKeyboardSize.value = 0;\n            scrollPosition.value = scrollBeforeKeyboardMovement.value;\n          }\n\n          if (\n            keyboardWillAppear.value ||\n            keyboardWillChangeSize ||\n            focusWasChanged\n          ) {\n            // persist scroll value\n            scrollPosition.value = position.value;\n            // just persist height - later will be used in interpolation\n            keyboardHeight.value = e.height;\n          }\n\n          // focus was changed\n          if (focusWasChanged) {\n            tag.value = e.target;\n\n            // save position of focused text input when keyboard starts to move\n            layout.value = input.value;\n            // save current scroll position - when keyboard will hide we'll reuse\n            // this value to achieve smooth hide effect\n            scrollBeforeKeyboardMovement.value = position.value;\n          }\n\n          if (focusWasChanged && !keyboardWillAppear.value) {\n            // update position on scroll value, so `onEnd` handler\n            // will pick up correct values\n            position.value += maybeScroll(e.height, true);\n          }\n        },\n        onMove: (e) => {\n          \"worklet\";\n\n          const keyboardFrame = interpolate(\n            e.height,\n            [0, keyboardHeight.value],\n            [0, keyboardHeight.value + extraKeyboardSpace],\n          );\n\n          currentKeyboardFrameHeight.value = keyboardFrame;\n\n          // if the user has set disableScrollOnKeyboardHide, only auto-scroll when the keyboard opens\n          if (!disableScrollOnKeyboardHide || keyboardWillAppear.value) {\n            maybeScroll(e.height);\n          }\n        },\n        onEnd: (e) => {\n          \"worklet\";\n\n          keyboardHeight.value = e.height;\n          scrollPosition.value = position.value;\n        },\n      },\n      [maybeScroll, disableScrollOnKeyboardHide, extraKeyboardSpace],\n    );\n\n    useAnimatedReaction(\n      () => input.value,\n      (current, previous) => {\n        if (\n          current?.target === previous?.target &&\n          current?.layout.height !== previous?.layout.height\n        ) {\n          const prevLayout = layout.value;\n\n          layout.value = input.value;\n          scrollPosition.value += maybeScroll(keyboardHeight.value, true);\n          layout.value = prevLayout;\n        }\n      },\n      [],\n    );\n\n    const view = useAnimatedStyle(\n      () =>\n        enabled\n          ? {\n              // animations become choppy when scrolling to the end of the `ScrollView` (when the last input is focused)\n              // this happens because the layout recalculates on every frame. To avoid this we slightly increase padding\n              // by `+1`. In this way we assure, that `scrollTo` will never scroll to the end, because it uses interpolation\n              // from 0 to `keyboardHeight`, and here our padding is `keyboardHeight + 1`. It allows us not to re-run layout\n              // re-calculation on every animation frame and it helps to achieve smooth animation.\n              // see: https://github.com/kirillzyusko/react-native-keyboard-controller/pull/342\n              paddingBottom: currentKeyboardFrameHeight.value + 1,\n            }\n          : {},\n      [enabled],\n    );\n\n    return (\n      <Reanimated.ScrollView\n        ref={onRef}\n        {...rest}\n        scrollEventThrottle={16}\n        onLayout={onScrollViewLayout}\n      >\n        {children}\n        <Reanimated.View style={view} />\n      </Reanimated.ScrollView>\n    );\n  },\n);\n\nexport default KeyboardAwareScrollView;\n"],"mappings":"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","ignoreList":[]}