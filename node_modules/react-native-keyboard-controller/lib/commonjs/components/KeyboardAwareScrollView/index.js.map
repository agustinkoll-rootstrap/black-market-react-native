{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_reactNativeReanimated","_reactNativeKeyboardController","_useSmoothKeyboardHandler","_utils","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_extends","assign","bind","arguments","length","apply","KeyboardAwareScrollView","forwardRef","children","onLayout","bottomOffset","disableScrollOnKeyboardHide","enabled","extraKeyboardSpace","snapToOffsets","rest","ref","scrollViewAnimatedRef","useAnimatedRef","scrollViewTarget","useSharedValue","scrollPosition","position","useScrollViewOffset","currentKeyboardFrameHeight","keyboardHeight","keyboardWillAppear","tag","initialKeyboardSize","scrollBeforeKeyboardMovement","input","useReanimatedFocusedInput","layout","height","useWindowDimensions","onRef","useCallback","assignedRef","current","onScrollViewLayout","value","findNodeHandle","maybeScroll","animated","_layout$value","_layout$value2","_layout$value3","parentScrollViewTarget","visibleRect","absoluteY","inputHeight","point","relativeScrollTo","interpolatedScrollTo","interpolate","scrollDistanceWithRespectToSnapPoints","targetScrollY","Math","max","scrollTo","positionOnScreen","topOfScreen","scrollFromCurrentPosition","customHeight","_input$value","prevScrollPosition","prevLayout","onChangeText","_layout$value4","_input$value2","onSelectionChange","selection","start","end","y","onChangeTextHandler","useMemo","debounce","useFocusedInputHandler","useSmoothKeyboardHandler","onStart","keyboardWillChangeSize","keyboardWillHide","focusWasChanged","target","onMove","keyboardFrame","onEnd","useAnimatedReaction","previous","view","useAnimatedStyle","paddingBottom","createElement","ScrollView","scrollEventThrottle","View","style","_default","exports"],"sources":["index.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useMemo } from \"react\";\nimport { findNodeHandle } from \"react-native\";\nimport Reanimated, {\n  interpolate,\n  scrollTo,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useAnimatedStyle,\n  useScrollViewOffset,\n  useSharedValue,\n} from \"react-native-reanimated\";\n\nimport {\n  useFocusedInputHandler,\n  useReanimatedFocusedInput,\n  useWindowDimensions,\n} from \"react-native-keyboard-controller\";\n\nimport { useSmoothKeyboardHandler } from \"./useSmoothKeyboardHandler\";\nimport { debounce, scrollDistanceWithRespectToSnapPoints } from \"./utils\";\n\nimport type {\n  LayoutChangeEvent,\n  ScrollView,\n  ScrollViewProps,\n} from \"react-native\";\nimport type {\n  FocusedInputLayoutChangedEvent,\n  FocusedInputSelectionChangedEvent,\n} from \"react-native-keyboard-controller\";\n\nexport type KeyboardAwareScrollViewProps = {\n  /** The distance between keyboard and focused `TextInput` when keyboard is shown. Default is `0`. */\n  bottomOffset?: number;\n  /** Prevents automatic scrolling of the `ScrollView` when the keyboard gets hidden, maintaining the current screen position. Default is `false`. */\n  disableScrollOnKeyboardHide?: boolean;\n  /** Controls whether this `KeyboardAwareScrollView` instance should take effect. Default is `true` */\n  enabled?: boolean;\n  /** Adjusting the bottom spacing of KeyboardAwareScrollView. Default is `0` */\n  extraKeyboardSpace?: number;\n} & ScrollViewProps;\n\n/*\n * Everything begins from `onStart` handler. This handler is called every time,\n * when keyboard changes its size or when focused `TextInput` was changed. In\n * this handler we are calculating/memoizing values which later will be used\n * during layout movement. For that we calculate:\n * - layout of focused field (`layout`) - to understand whether there will be overlap\n * - initial keyboard size (`initialKeyboardSize`) - used in scroll interpolation\n * - future keyboard height (`keyboardHeight`) - used in scroll interpolation\n * - current scroll position (`scrollPosition`) - used to scroll from this point\n *\n * Once we've calculated all necessary variables - we can actually start to use them.\n * It happens in `onMove` handler - this function simply calls `maybeScroll` with\n * current keyboard frame height. This functions makes the smooth transition.\n *\n * When the transition has finished we go to `onEnd` handler. In this handler\n * we verify, that the current field is not overlapped within a keyboard frame.\n * For full `onStart`/`onMove`/`onEnd` flow it may look like a redundant thing,\n * however there could be some cases, when `onMove` is not called:\n * - on iOS when TextInput was changed - keyboard transition is instant\n * - on Android when TextInput was changed and keyboard size wasn't changed\n * So `onEnd` handler handle the case, when `onMove` wasn't triggered.\n *\n * ====================================================================================================================+\n * -----------------------------------------------------Flow chart-----------------------------------------------------+\n * ====================================================================================================================+\n *\n * +============================+       +============================+        +==================================+\n * +  User Press on TextInput   +   =>  +  Keyboard starts showing   +   =>   + As keyboard moves frame by frame +  =>\n * +                            +       +       (run `onStart`)      +        +    `onMove` is getting called    +\n * +============================+       +============================+        +==================================+\n *\n *\n * +============================+       +============================+        +=====================================+\n * + Keyboard is shown and we   +   =>  +    User moved focus to     +   =>   + Only `onStart`/`onEnd` maybe called +\n * +    call `onEnd` handler    +       +     another `TextInput`    +        +    (without involving `onMove`)     +\n * +============================+       +============================+        +=====================================+\n *\n */\nconst KeyboardAwareScrollView = forwardRef<\n  ScrollView,\n  React.PropsWithChildren<KeyboardAwareScrollViewProps>\n>(\n  (\n    {\n      children,\n      onLayout,\n      bottomOffset = 0,\n      disableScrollOnKeyboardHide = false,\n      enabled = true,\n      extraKeyboardSpace = 0,\n      snapToOffsets,\n      ...rest\n    },\n    ref,\n  ) => {\n    const scrollViewAnimatedRef = useAnimatedRef<Reanimated.ScrollView>();\n    const scrollViewTarget = useSharedValue<number | null>(null);\n    const scrollPosition = useSharedValue(0);\n    const position = useScrollViewOffset(scrollViewAnimatedRef);\n    const currentKeyboardFrameHeight = useSharedValue(0);\n    const keyboardHeight = useSharedValue(0);\n    const keyboardWillAppear = useSharedValue(false);\n    const tag = useSharedValue(-1);\n    const initialKeyboardSize = useSharedValue(0);\n    const scrollBeforeKeyboardMovement = useSharedValue(0);\n    const { input } = useReanimatedFocusedInput();\n    const layout = useSharedValue<FocusedInputLayoutChangedEvent | null>(null);\n\n    const { height } = useWindowDimensions();\n\n    const onRef = useCallback((assignedRef: Reanimated.ScrollView) => {\n      if (typeof ref === \"function\") {\n        ref(assignedRef);\n      } else if (ref) {\n        ref.current = assignedRef;\n      }\n\n      scrollViewAnimatedRef(assignedRef);\n    }, []);\n    const onScrollViewLayout = useCallback(\n      (e: LayoutChangeEvent) => {\n        scrollViewTarget.value = findNodeHandle(scrollViewAnimatedRef.current);\n\n        onLayout?.(e);\n      },\n      [onLayout],\n    );\n\n    /**\n     * Function that will scroll a ScrollView as keyboard gets moving\n     */\n    const maybeScroll = useCallback(\n      (e: number, animated: boolean = false) => {\n        \"worklet\";\n\n        if (!enabled) {\n          return 0;\n        }\n\n        // input belongs to ScrollView\n        if (layout.value?.parentScrollViewTarget !== scrollViewTarget.value) {\n          return 0;\n        }\n\n        const visibleRect = height - keyboardHeight.value;\n        const absoluteY = layout.value?.layout.absoluteY || 0;\n        const inputHeight = layout.value?.layout.height || 0;\n        const point = absoluteY + inputHeight;\n\n        if (visibleRect - point <= bottomOffset) {\n          const relativeScrollTo =\n            keyboardHeight.value - (height - point) + bottomOffset;\n          const interpolatedScrollTo = interpolate(\n            e,\n            [initialKeyboardSize.value, keyboardHeight.value],\n            [\n              0,\n              scrollDistanceWithRespectToSnapPoints(\n                relativeScrollTo + scrollPosition.value,\n                snapToOffsets,\n              ) - scrollPosition.value,\n            ],\n          );\n          const targetScrollY =\n            Math.max(interpolatedScrollTo, 0) + scrollPosition.value;\n\n          scrollTo(scrollViewAnimatedRef, 0, targetScrollY, animated);\n\n          return interpolatedScrollTo;\n        }\n\n        if (absoluteY < 0) {\n          const positionOnScreen = visibleRect - inputHeight - bottomOffset;\n          const topOfScreen = scrollPosition.value + absoluteY;\n\n          scrollTo(\n            scrollViewAnimatedRef,\n            0,\n            topOfScreen - positionOnScreen,\n            animated,\n          );\n        }\n\n        return 0;\n      },\n      [bottomOffset, enabled, height, snapToOffsets],\n    );\n\n    const scrollFromCurrentPosition = useCallback(\n      (customHeight?: number) => {\n        \"worklet\";\n\n        const prevScrollPosition = scrollPosition.value;\n        const prevLayout = layout.value;\n\n        if (!input.value?.layout) {\n          return;\n        }\n\n        // eslint-disable-next-line react-compiler/react-compiler\n        layout.value = {\n          ...input.value,\n          layout: {\n            ...input.value.layout,\n            height: customHeight ?? input.value.layout.height,\n          },\n        };\n        scrollPosition.value = position.value;\n        maybeScroll(keyboardHeight.value, true);\n        scrollPosition.value = prevScrollPosition;\n        layout.value = prevLayout;\n      },\n      [maybeScroll],\n    );\n    const onChangeText = useCallback(() => {\n      \"worklet\";\n\n      // if typing a text caused layout shift, then we need to ignore this handler\n      // because this event will be handled in `useAnimatedReaction` below\n      if (layout.value?.layout.height !== input.value?.layout.height) {\n        return;\n      }\n\n      scrollFromCurrentPosition();\n    }, [scrollFromCurrentPosition]);\n    const onSelectionChange = useCallback(\n      (e: FocusedInputSelectionChangedEvent) => {\n        \"worklet\";\n\n        if (e.selection.start.position !== e.selection.end.position) {\n          scrollFromCurrentPosition(e.selection.end.y);\n        }\n      },\n      [scrollFromCurrentPosition],\n    );\n\n    const onChangeTextHandler = useMemo(\n      () => debounce(onChangeText, 200),\n      [onChangeText],\n    );\n\n    useFocusedInputHandler(\n      {\n        onChangeText: onChangeTextHandler,\n        onSelectionChange: onSelectionChange,\n      },\n      [onChangeTextHandler, onSelectionChange],\n    );\n\n    useSmoothKeyboardHandler(\n      {\n        onStart: (e) => {\n          \"worklet\";\n\n          const keyboardWillChangeSize =\n            keyboardHeight.value !== e.height && e.height > 0;\n\n          keyboardWillAppear.value = e.height > 0 && keyboardHeight.value === 0;\n\n          const keyboardWillHide = e.height === 0;\n          const focusWasChanged =\n            (tag.value !== e.target && e.target !== -1) ||\n            keyboardWillChangeSize;\n\n          if (keyboardWillChangeSize) {\n            initialKeyboardSize.value = keyboardHeight.value;\n          }\n\n          if (keyboardWillHide) {\n            // on back transition need to interpolate as [0, keyboardHeight]\n            initialKeyboardSize.value = 0;\n            scrollPosition.value = scrollBeforeKeyboardMovement.value;\n          }\n\n          if (\n            keyboardWillAppear.value ||\n            keyboardWillChangeSize ||\n            focusWasChanged\n          ) {\n            // persist scroll value\n            scrollPosition.value = position.value;\n            // just persist height - later will be used in interpolation\n            keyboardHeight.value = e.height;\n          }\n\n          // focus was changed\n          if (focusWasChanged) {\n            tag.value = e.target;\n\n            // save position of focused text input when keyboard starts to move\n            layout.value = input.value;\n            // save current scroll position - when keyboard will hide we'll reuse\n            // this value to achieve smooth hide effect\n            scrollBeforeKeyboardMovement.value = position.value;\n          }\n\n          if (focusWasChanged && !keyboardWillAppear.value) {\n            // update position on scroll value, so `onEnd` handler\n            // will pick up correct values\n            position.value += maybeScroll(e.height, true);\n          }\n        },\n        onMove: (e) => {\n          \"worklet\";\n\n          const keyboardFrame = interpolate(\n            e.height,\n            [0, keyboardHeight.value],\n            [0, keyboardHeight.value + extraKeyboardSpace],\n          );\n\n          currentKeyboardFrameHeight.value = keyboardFrame;\n\n          // if the user has set disableScrollOnKeyboardHide, only auto-scroll when the keyboard opens\n          if (!disableScrollOnKeyboardHide || keyboardWillAppear.value) {\n            maybeScroll(e.height);\n          }\n        },\n        onEnd: (e) => {\n          \"worklet\";\n\n          keyboardHeight.value = e.height;\n          scrollPosition.value = position.value;\n        },\n      },\n      [maybeScroll, disableScrollOnKeyboardHide, extraKeyboardSpace],\n    );\n\n    useAnimatedReaction(\n      () => input.value,\n      (current, previous) => {\n        if (\n          current?.target === previous?.target &&\n          current?.layout.height !== previous?.layout.height\n        ) {\n          const prevLayout = layout.value;\n\n          layout.value = input.value;\n          scrollPosition.value += maybeScroll(keyboardHeight.value, true);\n          layout.value = prevLayout;\n        }\n      },\n      [],\n    );\n\n    const view = useAnimatedStyle(\n      () =>\n        enabled\n          ? {\n              // animations become choppy when scrolling to the end of the `ScrollView` (when the last input is focused)\n              // this happens because the layout recalculates on every frame. To avoid this we slightly increase padding\n              // by `+1`. In this way we assure, that `scrollTo` will never scroll to the end, because it uses interpolation\n              // from 0 to `keyboardHeight`, and here our padding is `keyboardHeight + 1`. It allows us not to re-run layout\n              // re-calculation on every animation frame and it helps to achieve smooth animation.\n              // see: https://github.com/kirillzyusko/react-native-keyboard-controller/pull/342\n              paddingBottom: currentKeyboardFrameHeight.value + 1,\n            }\n          : {},\n      [enabled],\n    );\n\n    return (\n      <Reanimated.ScrollView\n        ref={onRef}\n        {...rest}\n        scrollEventThrottle={16}\n        onLayout={onScrollViewLayout}\n      >\n        {children}\n        <Reanimated.View style={view} />\n      </Reanimated.ScrollView>\n    );\n  },\n);\n\nexport default KeyboardAwareScrollView;\n"],"mappings":"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","ignoreList":[]}