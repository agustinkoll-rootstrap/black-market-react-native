"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  useResizeMode: true,
  useKeyboardAnimation: true,
  useReanimatedKeyboardAnimation: true,
  useGenericKeyboardHandler: true,
  useKeyboardHandler: true,
  useKeyboardController: true,
  useReanimatedFocusedInput: true,
  useFocusedInputHandler: true
};
exports.useFocusedInputHandler = useFocusedInputHandler;
exports.useGenericKeyboardHandler = useGenericKeyboardHandler;
exports.useKeyboardAnimation = void 0;
exports.useKeyboardController = useKeyboardController;
exports.useKeyboardHandler = useKeyboardHandler;
exports.useReanimatedFocusedInput = useReanimatedFocusedInput;
exports.useResizeMode = exports.useReanimatedKeyboardAnimation = void 0;
var _react = require("react");
var _bindings = require("../bindings");
var _constants = require("../constants");
var _context = require("../context");
var _useSyncEffect = _interopRequireDefault(require("./useSyncEffect"));
var _useWindowDimensions = require("./useWindowDimensions");
Object.keys(_useWindowDimensions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useWindowDimensions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useWindowDimensions[key];
    }
  });
});
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const useResizeMode = () => {
  (0, _react.useEffect)(() => {
    _bindings.KeyboardController.setInputMode(_constants.AndroidSoftInputModes.SOFT_INPUT_ADJUST_RESIZE);
    return () => _bindings.KeyboardController.setDefaultMode();
  }, []);
};
exports.useResizeMode = useResizeMode;
const useKeyboardAnimation = () => {
  useResizeMode();
  const context = (0, _context.useKeyboardContext)();
  return context.animated;
};
exports.useKeyboardAnimation = useKeyboardAnimation;
const useReanimatedKeyboardAnimation = () => {
  useResizeMode();
  const context = (0, _context.useKeyboardContext)();
  return context.reanimated;
};
exports.useReanimatedKeyboardAnimation = useReanimatedKeyboardAnimation;
function useGenericKeyboardHandler(handler, deps) {
  const context = (0, _context.useKeyboardContext)();
  (0, _useSyncEffect.default)(() => {
    const cleanup = context.setKeyboardHandlers(handler);
    return () => cleanup();
  }, deps);
}
function useKeyboardHandler(handler, deps) {
  useResizeMode();
  useGenericKeyboardHandler(handler, deps);
}
function useKeyboardController() {
  const context = (0, _context.useKeyboardContext)();
  return {
    setEnabled: context.setEnabled,
    enabled: context.enabled
  };
}
function useReanimatedFocusedInput() {
  const context = (0, _context.useKeyboardContext)();
  return {
    input: context.layout
  };
}
function useFocusedInputHandler(handler, deps) {
  const context = (0, _context.useKeyboardContext)();
  (0, _useSyncEffect.default)(() => {
    const cleanup = context.setInputHandlers(handler);
    return () => cleanup();
  }, deps);
}
//# sourceMappingURL=index.js.map