"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnimatedValue = useAnimatedValue;
exports.useEventHandlerRegistration = useEventHandlerRegistration;
var _react = require("react");
var _reactNative = require("react-native");
var _eventHandler = require("./event-handler");
function useEventHandlerRegistration(map, viewTagRef) {
  const onRegisterHandler = handler => {
    const viewTag = (0, _reactNative.findNodeHandle)(viewTagRef.current);
    const ids = Object.keys(handler).map(handlerName => {
      const eventName = map.get(handlerName);
      const functionToCall = handler[handlerName];
      if (eventName && viewTag) {
        return (0, _eventHandler.registerEventHandler)(event => {
          "worklet";

          functionToCall === null || functionToCall === void 0 || functionToCall(event);
        }, eventName, viewTag);
      }
      return null;
    });
    return () => {
      ids.forEach(id => id ? (0, _eventHandler.unregisterEventHandler)(id) : null);
    };
  };
  return onRegisterHandler;
}

/**
 * TS variant of `useAnimatedValue` hook which is added in RN 0.71
 * A better alternative of storing animated values in refs, since
 * it doesn't recreate a new `Animated.Value` object on every re-render
 * and therefore consumes less memory. We can not use a variant from
 * RN, since this library supports earlier versions of RN.
 *
 * @see https://github.com/facebook/react-native/commit/e22217fe8b9455e32695f88ca835e11442b0a937
 */
function useAnimatedValue(initialValue, config) {
  const ref = (0, _react.useRef)(null);
  if (ref.current === null) {
    ref.current = new _reactNative.Animated.Value(initialValue, config);
  }
  return ref.current;
}
//# sourceMappingURL=internal.js.map